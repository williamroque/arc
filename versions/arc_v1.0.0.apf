{"script": "import sys\nimport os\n\nimport pandas as pd\nimport numpy as np\nimport xlsxwriter\n\nimport json\n\nimport time\nimport locale\n\nimport re\n\n# INPUTS AND SANITATION\n\ninputs = json.loads(sys.stdin.readlines()[0])\n\nsaldo_files = inputs['inputFiles']\noutput_path = inputs['outputFile']\nindexador = inputs['indexador']\npu_emis = inputs['pu-emis']\ntotal = inputs['total']\nr_sub = inputs['r-sub']\nr_sen = inputs['r-sen']\ntarget_irr = inputs['target-irr']\nt_em_senior_anual = inputs['t-em-senior-anual']\nc_period = inputs['c-period']\nfr_previsto = inputs['fr-previsto']\npmt_proper = inputs['pmt-proper']\ndespesas = inputs['despesas']\n\ntotal = float(total)\nr_sub = float(r_sub)\nr_sen = float(r_sen)\ntarget_irr = float(target_irr)\nt_em_senior_anual = float(t_em_senior_anual)\nc_period = int(c_period)\npmt_proper = float(pmt_proper) / 100\ndespesas = float(despesas)\n\nfr_previsto = int(fr_previsto)\n\nt_em_anual = t_em_senior_anual\n\nt_em_anual /= 100\nt_em_senior_anual /= 100\n\nt_em_mensal = (1 + t_em_anual) ** (1/12) - 1\nt_em_senior_mensal = (1 + t_em_senior_anual) ** (1/12) - 1\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR')\nre_date = re.compile('^\\s*[A-Z][a-z]{2}/\\d{4}\\s*$')\n\ndef parse_frame(df):\n    h, w = df.shape\n\n    evolution = []\n    for col in range(w):\n        if re_date.match(df.iloc[0, col]):\n            month = df.iloc[0, col]\n            parsed_month = time.strptime(month, '%b/%Y')\n            now = time.localtime()\n\n            p_y = parsed_month.tm_year\n            p_m = parsed_month.tm_mon\n            n_y = now.tm_year\n            n_m = now.tm_mon\n\n            if p_y > n_y or (p_y == n_y and p_m > n_m):\n                pass\n            elif p_y == n_y and p_m == n_m:\n                pass\n            else:\n                continue\n\n            evolution.append((\n                time.strftime('%b-%y', parsed_month),\n                df.iloc[h - 1, col]\n            ))\n\n    return evolution\n\nfluxo = {}\nfor file in saldo_files:\n    df = pd.read_excel(file)\n    parsed_df = parse_frame(df)\n    for m in parsed_df:\n        date, val = m\n        if date in fluxo:\n            fluxo[date].append(val)\n        else:\n            fluxo[date] = [val]\n\nflux_total = [sum(fluxo[m]) for m in fluxo]\n\nmonths = [m for m in fluxo]\n\nm_bound = months[0]\nf_bound = flux_total[0]\n\nmonths = months[1:]\nflux_total = flux_total[1:]\n\nnz_index = flux_total.index(next(i for i in flux_total if i != 0))\nflux_total = flux_total[nz_index:]\n\nmonths = months[nz_index:]\n\nfor i in range(len(flux_total) - 1, -1, -1):\n    if flux_total[i] == 0:\n        flux_total.pop()\n        months.pop()\n    else:\n        break\n\n# CURVE CALCULATION\n\nwhile True:\n    saldo_sub = total * r_sub / 100\n    saldo_sen = total * r_sen / 100\n\n    saldo_sub_evol      = []\n    despesas_sub_evol   = []\n    juros_sub_evol      = []\n    amort_sub_evol      = []\n    pmt_sub_evol        = []\n    amort_perc_sub_evol = []\n\n    saldo_sen_evol      = []\n    juros_sen_evol      = []\n    amort_sen_evol      = []\n    pmt_sen_evol        = []\n    amort_perc_sen_evol = []\n\n    sub_finished = False\n    sen_finished = False\n\n    sub_length = 0\n    sen_length = 0\n\n    for m in range(len(months)):\n        if sub_finished:\n            break\n\n        juros_sub = saldo_sub * t_em_mensal\n        sub_length += 1\n\n        if not sen_finished:\n            amort_sub = 0\n\n            juros_sen = saldo_sen * t_em_senior_mensal\n            sen_length += 1\n\n            if m > c_period - 1:\n                pmt_sub = juros_sub + despesas\n                pmt_sen = flux_total[m - 1] * pmt_proper - pmt_sub\n                amort_sen = pmt_sen - juros_sen\n                amort_perc_sen = amort_sen / saldo_sen\n\n                if amort_sen < 0:\n                    break\n            else:\n                pmt_sub = pmt_sen = amort_sen = amort_perc_sen = 0\n\n            saldo_sen = saldo_sen + juros_sen - pmt_sen\n        else:\n            juros_sen = pmt_sen = amort_sen = saldo_sen = 0\n\n            pmt_sub = flux_total[m - 1] * pmt_proper\n            amort_sub = pmt_sub - juros_sub - despesas\n\n        amort_perc_sub = amort_sub / saldo_sub\n\n        if amort_perc_sen >= 1 and not sen_finished:\n            amort_sen = saldo_sen_evol[-1]\n            pmt_sen = amort_sen + juros_sen\n\n            pmt_sub = flux_total[m - 1] * pmt_proper - pmt_sen\n            amort_sub = pmt_sub - juros_sub - despesas\n\n            amort_perc_sub = amort_sub / saldo_sub\n\n            sen_finished = True\n\n        if amort_perc_sub >= 1:\n            amort_sub = saldo_sub_evol[-1]\n            pmt_sub = amort_sub + juros_sub + despesas\n            sub_finished = True\n\n        saldo_sub = saldo_sub + despesas + juros_sub - pmt_sub\n\n        saldo_sub_evol.append(max(0, saldo_sub))\n        despesas_sub_evol.append(despesas)\n        juros_sub_evol.append(juros_sub)\n        amort_sub_evol.append(amort_sub)\n        pmt_sub_evol.append(pmt_sub)\n        amort_perc_sub_evol.append(min(100, amort_perc_sub * 100))\n\n        saldo_sen_evol.append(max(0, saldo_sen))\n        juros_sen_evol.append(juros_sen)\n        amort_sen_evol.append(amort_sen)\n        pmt_sen_evol.append(pmt_sen)\n        amort_perc_sen_evol.append(min(100, amort_perc_sen * 100))\n\n    inv_flux = [-total, *np.zeros(c_period)] + [sum(x) for x in list(zip(amort_sub_evol,\n                                                                         juros_sub_evol,\n                                                                         amort_sen_evol,\n                                                                         juros_sen_evol))[c_period:]]\n\n    irr = ((1 + np.irr(inv_flux)) ** 12 - 1) * 100\n\n    if not sub_finished:\n        pmt_proper = int((pmt_proper + .01) * 100) / 100\n    else:\n        if abs(target_irr - irr) > .004:\n            t_em_anual *= (target_irr / irr)\n            t_em_mensal = (1 + t_em_anual) ** (1/12) - 1\n        else:\n            break\n\ncol_width = 30\nrow_format = lambda x, y: '{0:<{2}} | {1:<{2}}'.format('{:,.2f} R$'.format(x),\n                                                       '{:,.2f} R$'.format(y),\n                                                       col_width)\n\n# OUTPUT\n\ndef print_data():\n    print('{0:^{2}} | {1:^{2}}'.format('SEN', 'SUB', col_width))\n\n    for i, m in enumerate(months):\n        if i >= len(saldo_sen_evol):\n            break\n\n        print('\\n{0:^{1}}'.format(m, 2 * col_width + 3))\n\n        print('{} : Saldo'.format(row_format(saldo_sen_evol[i],\n                                             saldo_sub_evol[i])))\n\n        print('{} : Juros'.format(row_format(juros_sen_evol[i],\n                                             juros_sub_evol[i])))\n\n        print('{} : Amort.'.format(row_format(amort_sen_evol[i],\n                                              amort_sub_evol[i])))\n\n        print('{} : PMT'.format(row_format(pmt_sen_evol[i],\n                                           pmt_sub_evol[i])))\n\n        print('{0:<{2}} | {1:<{2}} : Amort. %'\\\n              .format('{:,.4f}%'.format(amort_perc_sen_evol[i]),\n                      '{:,.4f}%'.format(amort_perc_sub_evol[i]),\n                      col_width))\n\nworkbook = xlsxwriter.Workbook(output_path)\nworkbook.set_size(1400, 1000)\ncurve_sheet = workbook.add_worksheet()\ncurve_sheet.hide_gridlines(2)\n\ncurve_sheet.insert_image('F2', '{}/logos-logo.png'.format(os.path.dirname(os.path.abspath(__file__))), {'x_scale': 0.75, 'y_scale': 0.85, 'x_offset': 10, 'y_offset': -10})\n\ncolumn_widths = [6, 18, 15.5, 14, 17.5, 19, 12, 13.5, 8, 6, 11, 8, 4, 6, 8, 13, 10, 12, 12, 11, 10, 4, 6, 8, 13, 10, 12, 12, 11, 4, 6, 6, 12]\nfor i, w in enumerate(column_widths):\n    curve_sheet.set_column(i, i, w)\n\n# GENERAL STYLING SECTION\n\nprelude_header_format = workbook.add_format({\n    'bold': True,\n    'font_color': 'white',\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'border': 2,\n    'border_color': 'white',\n    'bg_color': '#3465FC'\n})\n\nprelude_text_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter'\n})\n\nprelude_percentage_0_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0%'\n})\n\nprelude_percentage_2_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0.00%'\n})\n\nprelude_percentage_4_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0.0000%'\n})\n\nprelude_quantity_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'valign': 'vcenter',\n    'num_format': '#,##0_);(#,##0)',\n})\n\nprelude_currency_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'bold': True,\n    'num_format': '_(\"R$\"* #,##0.00_);_(\"R$\"* (#,##0.00);_(\"R$\"* \"-\"??_);_(@_)'\n})\n\nsection_title_format = workbook.add_format({\n    'bold': True,\n    'italic': True,\n    'font_color': '#477DC0',\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center',\n    'valign': 'vcenter',\n    'top': 1,\n    'left': 1,\n    'right': 1\n})\n\n# END SECTION\n\n# FLUXO\n\ncurve_sheet.merge_range('J3:L4', 'Fluxo de Cr\u00e9ditos Imobili\u00e1rios', section_title_format)\n\nflux_y_offset = 5\n\nn_index_format_template = {\n    'align': 'center',\n    'left': 1\n}\nflux_format_template = {\n    'bold': True,\n    'num_format': '#,##0.00',\n    'align': 'left'\n}\ndate_format_template = {\n    'align': 'center',\n    'right': 1\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\nflux_format = workbook.add_format(flux_format_template)\ndate_format = workbook.add_format(date_format_template)\n\ncurve_sheet.write(flux_y_offset - 1, 9, 1, n_index_format)\ncurve_sheet.write(flux_y_offset - 1, 10, f_bound, flux_format)\ncurve_sheet.write(flux_y_offset - 1, 11, m_bound, date_format)\n\nfor i, m in enumerate(months):\n    n_index_format = workbook.add_format(n_index_format_template)\n    flux_format = workbook.add_format(flux_format_template)\n    date_format = workbook.add_format(date_format_template)\n\n    if i == len(months) - 1:\n        n_index_format.set_bottom(1)\n        flux_format.set_bottom(1)\n        date_format.set_bottom(1)\n\n    curve_sheet.write(i + flux_y_offset, 9, i + 2, n_index_format)\n    curve_sheet.write(i + flux_y_offset, 10, flux_total[i], flux_format)\n    curve_sheet.write(i + flux_y_offset, 11, m, date_format)\n\n    curve_sheet.set_row(i + flux_y_offset, 18)\n\n# END SECTION\n\nsaldo_sub = total * r_sub / 100\nsaldo_sen = total * r_sen / 100\n\n# PRELUDE SECTION\n\ndef write_prelude_section(x, y, title, values):\n    curve_sheet.write(y, x, title, prelude_header_format)\n    for i, (v, f) in enumerate(values):\n        curve_sheet.write(y + i + 1, x, v, f)\n\nwrite_prelude_section(1, 11, 'Taxa de Juros', [\n    (target_irr / 100, prelude_percentage_2_format)\n])\nwrite_prelude_section(2, 11, 'Valor Total', [\n    (total, prelude_currency_format)\n])\nwrite_prelude_section(4, 11, 'S\u00e9rie', [\n    ('S\u00eanior', prelude_text_format),\n    ('Subordinado', prelude_text_format)\n])\nwrite_prelude_section(5, 11, 'PU Emiss\u00e3o', [\n    (int(pu_emis), prelude_currency_format),\n    (int(pu_emis), prelude_currency_format)\n])\nwrite_prelude_section(6, 11, 'Indexador', [\n    (indexador, prelude_text_format),\n    (indexador, prelude_text_format)\n])\nwrite_prelude_section(7, 11, 'Taxa de Juros', [\n    (t_em_senior_anual, prelude_percentage_2_format),\n    (t_em_anual, prelude_percentage_2_format),\n])\n\n# ROW\n\nwrite_prelude_section(1, 16, 'S\u00e9rie', [\n    ('S\u00eanior', prelude_text_format),\n    ('Subordinado', prelude_text_format)\n])\nwrite_prelude_section(2, 16, 'PU Liquida\u00e7\u00e3o', [\n    (int(pu_emis), prelude_currency_format),\n    (int(pu_emis), prelude_currency_format)\n])\nwrite_prelude_section(3, 16, 'Quantidades', [\n    ('=E18/C18', prelude_quantity_format),\n    ('=E19/C19', prelude_quantity_format)\n])\nwrite_prelude_section(4, 16, 'Montante', [\n    ('=C13*G18', prelude_currency_format),\n    ('=C13*G19', prelude_currency_format)\n])\nwrite_prelude_section(5, 16, 'Prazo', [\n    ('{} meses'.format(sen_length), prelude_text_format),\n    ('{} meses'.format(sub_length), prelude_text_format)\n])\nwrite_prelude_section(6, 16, 'Raz\u00e3o', [\n    (r_sen / 100, prelude_percentage_0_format),\n    (r_sub / 100, prelude_percentage_0_format)\n])\nwrite_prelude_section(7, 16, '% PMT', [\n    (pmt_proper, prelude_percentage_0_format)\n])\n\n# ROW\n\nwrite_prelude_section(1, 21, 'Per\u00edodo', [\n    ('Mensal', prelude_text_format),\n    ('Anual', prelude_text_format)\n])\nwrite_prelude_section(2, 21, 'S\u00eanior', [\n    ('=(1+C24)^(1/12)-1', prelude_percentage_4_format),\n    (t_em_senior_anual, prelude_percentage_2_format)\n])\nwrite_prelude_section(3, 21, 'Subordinado', [\n    ('=(1+D24)^(1/12)-1', prelude_percentage_4_format),\n    (t_em_anual, prelude_percentage_2_format)\n])\nwrite_prelude_section(4, 21, 'TIR', [\n    ('=IRR(AG{}:AG{})'.format(flux_y_offset, flux_y_offset + len(saldo_sub_evol)), prelude_percentage_2_format),\n    ('=(1+E23)^12-1', prelude_percentage_2_format)\n])\n\nsub_y_offset = 3\nsub_y_init_offset = 5\n\nwrite_prelude_section(6, 21, 'FR 3 PMTS', [\n    ('=SUM(K{}:K{})*H18-SUM(Q{}:Q{})'.format(flux_y_offset, flux_y_offset + c_period, sub_y_offset + sub_y_init_offset, sub_y_offset + sub_y_init_offset + c_period), prelude_currency_format)\n])\nwrite_prelude_section(7, 21, 'FR Previsto', [\n    (fr_previsto, prelude_currency_format)\n])\n\n# END SECTION\n\n# SUBORDINATE TRANCHE\n\ncurve_sheet.merge_range('N3:U4', 'Tranche Subordinado', section_title_format)\n\ncol_headers = ['Saldo Devedor', 'Despesas', 'Juros', 'Amortiz', 'PMT', '% AM']\n\nheader_y_offset = 2\n\nfor i, h in enumerate(col_headers):\n    col_header_format = workbook.add_format({\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial'\n    })\n    if i == len(col_headers) - 1:\n        col_header_format.set_right(1)\n\n    curve_sheet.write(sub_y_offset + header_y_offset, i + 15, h, col_header_format)\n\nn_index_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center',\n    'left': 1\n}\ndate_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center'\n}\nquantity_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\ndate_format = workbook.add_format(date_format_template)\nquantity_format = workbook.add_format(quantity_format_template)\n\ninit_row = sub_y_offset + sub_y_init_offset - 1\ncurve_sheet.write(init_row, 13, 1, n_index_format)\ncurve_sheet.write(init_row, 14, m_bound, date_format)\ncurve_sheet.write(init_row, 15, saldo_sub, quantity_format)\n\nfor i, saldo in list(enumerate(saldo_sub_evol)):\n    prev_row = i + sub_y_offset + sub_y_init_offset\n    current_row = prev_row + 1\n\n    n_index_format = workbook.add_format(n_index_format_template)\n    date_format = workbook.add_format(date_format_template)\n    quantity_format = workbook.add_format(quantity_format_template)\n    percentage_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    })\n\n    if i == len(saldo_sub_evol) - 1:\n        n_index_format.set_bottom(1)\n        date_format.set_bottom(1)\n        quantity_format.set_bottom(1)\n        percentage_format.set_bottom(1)\n\n    i_val = m_val = s_val = d_val = j_val = a_val = pmt_val = p_val = ''\n\n    i_val = i + 2\n    m_val = months[i]\n    s_val = '=P{0}+Q{1}+R{1}-T{1}'.format(prev_row, current_row)\n    d_val = despesas\n    j_val = '=P{}*D23'.format(prev_row)\n\n    if i < len(saldo_sub_evol) - 1:\n        if i >= c_period:\n            a_val = '=T{0}-R{0}-Q{0}'.format(current_row)\n\n            if saldo_sen_evol[i] > 0:\n                pmt_val = '=Q{0}+R{0}'.format(current_row)\n            elif saldo_sen_evol[i - 1] > 0:\n                pmt_val = '=K{}*H18-AB{}'.format(i + sub_y_offset + sub_y_init_offset - 3, current_row)\n            else:\n                pmt_val = '=K{}*H18'.format(i + sub_y_offset + sub_y_init_offset - 3)\n        else:\n            a_val = pmt_val = 0\n    else:\n        a_val = '=P{}'.format(prev_row)\n        pmt_val = '=Q{0}+R{0}+S{0}'.format(current_row)\n\n    p_val = '=S{}/P{}'.format(current_row, prev_row)\n\n    curve_sheet.write(prev_row, 13, i_val, n_index_format)\n    curve_sheet.write(prev_row, 14, m_val, date_format)\n    curve_sheet.write(prev_row, 15, s_val, quantity_format)\n    curve_sheet.write(prev_row, 16, d_val, quantity_format)\n    curve_sheet.write(prev_row, 17, j_val, quantity_format)\n    curve_sheet.write(prev_row, 18, a_val, quantity_format)\n    curve_sheet.write(prev_row, 19, pmt_val, quantity_format)\n    curve_sheet.write(prev_row, 20, p_val, percentage_format)\n\n# END SECTION\n\n# SENIOR TRANCHE\n\nl_border_format = workbook.add_format({'left': 1})\nr_border_format = workbook.add_format({'right': 1})\n\ndef patch_border(is_l, row, col, n):\n    for i in range(n):\n        if is_l:\n            curve_sheet.write(row + i, col, '', l_border_format)\n        else:\n            curve_sheet.write(row + i, col, '', r_border_format)\n\npatch_border(True, 4, 13, 3)\npatch_border(False, 4, 20, 1)\npatch_border(False, 6, 20, 2)\n\ncurve_sheet.merge_range('W3:AC4', 'Tranche S\u00eanior', section_title_format)\ncol_headers = ['Saldo Devedor', 'Juros', 'Amortiz', 'PMT', '% AM']\n\nis_finished = False\n\nfor i, saldo in enumerate(saldo_sen_evol):\n    prev_row = i + sub_y_offset\n    current_row = prev_row + 1\n\n    n_index_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'left': 1\n    })\n    date_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center'\n    })\n    quantity_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n    })\n    percentage_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    })\n\n    i_val = m_val = s_val = j_val = a_val = pmt_val = p_val = ''\n\n    if i >= sub_y_init_offset:\n        i_val = i - sub_y_init_offset + 2\n        m_val = months[i - sub_y_init_offset]\n        s_val = '=Y{0}+Z{1}-AB{1}'.format(prev_row, current_row)\n        j_val = '=Y{}*C23'.format(prev_row)\n\n        if i - sub_y_init_offset >= c_period:\n            if saldo_sen_evol[i - sub_y_offset - 2] != 0:\n                a_val = '=AB{0}-Z{0}'.format(current_row)\n                pmt_val = '=K{}*H18-T{}'.format(i + sub_y_offset - 3, current_row)\n            else:\n                a_val = '=Y{}'.format(prev_row)\n                pmt_val = '=Z{0}+AA{0}'.format(current_row)\n\n                n_index_format.set_bottom(1)\n                date_format.set_bottom(1)\n                quantity_format.set_bottom(1)\n                percentage_format.set_bottom(1)\n\n                is_finished = True\n        else:\n            a_val = 0\n            pmt_val = 0\n\n        p_val = '=AA{}/Y{}'.format(current_row, prev_row)\n    elif i == sub_y_init_offset - 1:\n        i_val = i - sub_y_init_offset + 2\n        m_val = m_bound\n        s_val = saldo_sen\n\n    curve_sheet.write(prev_row, 22, i_val, n_index_format)\n    curve_sheet.write(prev_row, 23, m_val, date_format)\n    curve_sheet.write(prev_row, 24, s_val, quantity_format)\n    curve_sheet.write(prev_row, 25, j_val, quantity_format)\n    curve_sheet.write(prev_row, 26, a_val, quantity_format)\n    curve_sheet.write(prev_row, 27, pmt_val, quantity_format)\n    curve_sheet.write(prev_row, 28, p_val, percentage_format)\n\n    if i == header_y_offset:\n        for j, h in enumerate(col_headers):\n            col_header_format = workbook.add_format({\n                'bold': True,\n                'align': 'center',\n                'font_size': 10,\n                'font_name': 'arial'\n            })\n            if j == len(col_headers) - 1:\n                col_header_format.set_right(1)\n\n            curve_sheet.write(prev_row, j + 24, h, col_header_format)\n\n    if is_finished:\n        break\n\n# END SECTION\n\n# FINANCIAL FLUX\ncurve_sheet.merge_range('AE3:AG4', 'Fluxo Financeiro', section_title_format)\n\ncurrency_format_template = {\n    'font_name': 'arial',\n    'font_size': 9,\n    'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-',\n    'right': 1\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\ndate_format = workbook.add_format(date_format_template)\ncurrency_format = workbook.add_format(currency_format_template)\n\ncurve_sheet.write(4, 30, 1, n_index_format)\ncurve_sheet.write(4, 31, m_bound, date_format)\ncurve_sheet.write(4, 32, -total, currency_format)\n\nfor i, m in enumerate(months):\n    if i >= len(saldo_sub_evol):\n        break\n\n    n_index_format = workbook.add_format(n_index_format_template)\n    date_format = workbook.add_format(date_format_template)\n    currency_format = workbook.add_format(currency_format_template)\n\n    if i == len(saldo_sub_evol) - 1:\n        n_index_format.set_bottom(1)\n        date_format.set_bottom(1)\n        currency_format.set_bottom(1)\n\n    curve_sheet.write(i + flux_y_offset, 30, i + 2, n_index_format)\n    curve_sheet.write(i + flux_y_offset, 31, m, date_format)\n\n    c_val = ''\n    if i < c_period:\n        c_val = 0\n    else:\n        c_val = '=R{0}+S{0}+Z{0}+AA{0}'.format(i + flux_y_offset + 4)\n    curve_sheet.write(i + flux_y_offset, 32, c_val, currency_format)\n\n    curve_sheet.set_row(i + flux_y_offset, 18)\n\n# END SECTION\n\nworkbook.close()\n", "forms": [{"id": "basic", "label": "Basic", "form": [[{"id": "indexador", "label": "Indexador", "type": "float", "width": 33.33}, {"id": "pu-emis", "label": "P.U. de Emiss\u00e3o", "type": "float", "width": 33.33}, {"id": "total", "label": "Total", "type": "float", "width": 33.33}], [{"id": "r-sub", "label": "R. Subordinado", "type": "percentage", "width": 25}, {"id": "r-sen", "label": "R. S\u00eanior", "type": "percentage", "width": 25}, {"id": "target-irr", "label": "TIR Projetado", "type": "percentage", "width": 25}, {"id": "t-em-senior-anual", "label": "T.A. Emiss\u00e3o S\u00eanior", "type": "percentage", "width": 25}], [{"id": "c-period", "label": "P. Car\u00eancia", "type": "int", "width": 25}, {"id": "fr-previsto", "label": "F.R. Previsto", "type": "float", "width": 25}, {"id": "pmt-proper", "label": "PMT Projetado Base", "type": "percentage", "width": 25}, {"id": "despesas", "label": "Despesas", "type": "float", "width": 25}]]}]}