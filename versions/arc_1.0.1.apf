{"script": "import sys\nimport os\n\nimport pandas as pd\nimport numpy as np\nimport xlsxwriter\n\nimport json\n\nimport time\nimport locale\n\nimport re\n\nimport datetime\n\n# INPUTS AND SANITATION\n\ninputs = json.loads(sys.stdin.readlines()[0])\n\nsaldo_files = inputs['inputFiles']\noutput_path = inputs['outputFile']\nindexador = inputs['indexador']\npu_emis = inputs['pu-emis']\ntotal = inputs['total']\nr_sen = inputs['r-sen']\nr_sub = inputs['r-sub']\n\n# (mesostrata = intermediary layers)\nmesostrata = inputs['mesostrata']\n\ntarget_irr = inputs['target-irr']\nt_em_senior_anual = inputs['t-em-senior-anual']\nc_period = inputs['c-period']\nfr_previsto = inputs['fr-previsto']\npmt_proper = inputs['pmt-proper']\ndespesas = inputs['despesas']\n\ntotal = float(total)\nr_sen = float(r_sen)\nr_sub = float(r_sub)\ntarget_irr = float(target_irr)\nt_em_senior_anual = float(t_em_senior_anual)\nc_period = int(c_period)\npmt_proper = float(pmt_proper) / 100\ndespesas = float(despesas)\n\nfr_previsto = int(fr_previsto)\n\nt_em_anual = t_em_senior_anual\n\nt_em_anual /= 100\nt_em_senior_anual /= 100\n\nt_em_mensal = (1 + t_em_anual) ** (1/12) - 1\nt_em_senior_mensal = (1 + t_em_senior_anual) ** (1/12) - 1\nt_em_mesostrata_mensal = [(1 + layer[2] / 100) ** (1/12) - 1 for layer in mesostrata]\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR')\nre_date = re.compile('^\\s*[A-Z][a-z]{2}/\\d{4}\\s*$')\n\ndef parse_frame(df):\n    h, w = df.shape\n\n    evolution = []\n    for col in range(w):\n        if re_date.match(df.iloc[0, col]):\n            month = df.iloc[0, col]\n            parsed_month = time.strptime(month, '%b/%Y')\n            now = time.localtime()\n\n            p_y = parsed_month.tm_year\n            p_m = parsed_month.tm_mon\n            n_y = now.tm_year\n            n_m = now.tm_mon\n\n            if p_y > n_y or (p_y == n_y and p_m > n_m):\n                pass\n            elif p_y == n_y and p_m == n_m:\n                pass\n            else:\n                continue\n\n            evolution.append((\n                time.strftime('%b-%y', parsed_month),\n                df.iloc[h - 1, col]\n            ))\n\n    return evolution\n\nfluxo = {}\nfor file in saldo_files:\n    df = pd.read_excel(file)\n    parsed_df = parse_frame(df)\n    for m in parsed_df:\n        date, val = m\n        if date in fluxo:\n            fluxo[date].append(val)\n        else:\n            fluxo[date] = [val]\n\nflux_total = [sum(fluxo[m]) for m in fluxo]\n\nmonths = [m for m in fluxo]\n\nm_bound = months[0]\nf_bound = flux_total[0]\n\nmonths = months[1:]\nflux_total = flux_total[1:]\n\nnz_index = flux_total.index(next(i for i in flux_total if i != 0))\nflux_total = flux_total[nz_index:]\n\nmonths = months[nz_index:]\n\nfor i in range(len(flux_total) - 1, -1, -1):\n    if flux_total[i] == 0:\n        flux_total.pop()\n        months.pop()\n    else:\n        break\n\n# CURVE CALCULATION\n\nwhile True:\n    dynamic_despesas = despesas\n\n    saldo_sen             = total * r_sen / 100\n    saldo_sen_evol        = []\n    pmt_sen_evol          = []\n    amort_sen_evol        = []\n    juros_sen_evol        = []\n\n    saldo_mesostrata      = [total * layer[1] / 100 for layer in mesostrata]\n    saldo_mesostrata_evol = [[] for _ in mesostrata]\n    pmt_mesostrata_evol   = [[] for _ in mesostrata]\n    amort_mesostrata_evol = [[] for _ in mesostrata]\n    juros_mesostrata_evol = [[] for _ in mesostrata]\n\n    saldo_sub             = total * r_sub / 100\n    saldo_sub_evol        = []\n    pmt_sub_evol          = []\n    amort_sub_evol        = []\n    juros_sub_evol        = []\n\n    current_layer = 0\n    is_transitioning = False\n\n    sen_finished = False\n\n    sen_length = 0\n    sub_length = 0\n\n    for i, m in enumerate(months):\n        juros_sub = saldo_sub * t_em_mensal\n        juros_mesostrata = [saldo_mesostrata[layer_i] * t_em_mesostrata_mensal[layer_i] for layer_i, layer in enumerate(mesostrata)]\n        juros_sen = saldo_sen * t_em_senior_mensal\n\n        if i > c_period - 1:\n            pmt_sub = juros_sub + dynamic_despesas\n            pmt_mesostrata = juros_mesostrata.copy()\n            pmt_sen = flux_total[i - 1] * pmt_proper - sum(pmt_mesostrata) - pmt_sub\n\n            if current_layer == len(mesostrata) + 1:\n                if is_transitioning:\n                    if len(mesostrata):\n                        pmt_sub = flux_total[i - 1] * pmt_proper - pmt_mesostrata[0]\n                    else:\n                        pmt_sub = flux_total[i - 1] * pmt_proper - pmt_sen\n                    is_transitioning = False\n                else:\n                    pmt_sub = flux_total[i - 1] * pmt_proper\n            elif current_layer >= 1:\n                if is_transitioning:\n                    pmt_mesostrata[-current_layer] = flux_total[i - 1] * pmt_proper - (pmt_sen if current_layer == 1 else pmt_mesostrata[-current_layer - 1])\n                    is_transitioning = False\n                else:\n                    pmt_mesostrata[-current_layer] = flux_total[i - 1] * pmt_proper\n\n            amort_sub = pmt_sub - juros_sub - dynamic_despesas\n            amort_mesostrata = [a - b for a, b in zip(pmt_mesostrata, juros_mesostrata)]\n            amort_sen = pmt_sen - juros_sen\n        else:\n            pmt_sub = amort_sub = 0\n            pmt_mesostrata = amort_mesostrata = [0 for _ in mesostrata]\n            pmt_sen = amort_sen = 0\n\n        if saldo_sub <= 0:\n            break\n        for layer_i, saldo_layer in enumerate(saldo_mesostrata):\n            if saldo_layer <= 0:\n                pmt_mesostrata[layer_i] = juros_mesostrata[layer_i] = amort_mesostrata[layer_i] = 0\n        if saldo_sen <= 0:\n            pmt_sen = juros_sen = amort_sen = 0\n        print(i, m, saldo_sub, saldo_mesostrata, saldo_sen, pmt_sub, pmt_mesostrata, pmt_sen, juros_sub, juros_mesostrata, juros_sen, flux_total[i - 1])\n\n        saldo_sub = saldo_sub + dynamic_despesas + juros_sub - pmt_sub\n        saldo_mesostrata = [saldo_mesostrata[layer_i] + juros_mesostrata[layer_i] - pmt_mesostrata[layer_i] for layer_i, layer in enumerate(mesostrata)]\n        saldo_sen = saldo_sen + juros_sen - pmt_sen\n\n        saldo_sub_evol.append(saldo_sub)\n        for layer_i, layer in enumerate(saldo_mesostrata_evol):\n            layer.append(saldo_mesostrata[layer_i])\n        saldo_sen_evol.append(saldo_sen)\n\n        pmt_sub_evol.append(pmt_sub)\n        for layer_i, layer in enumerate(pmt_mesostrata_evol):\n            layer.append(pmt_mesostrata[layer_i])\n        pmt_sen_evol.append(pmt_sen)\n\n        amort_sub_evol.append(amort_sub)\n        for layer_i, layer in enumerate(amort_mesostrata_evol):\n            layer.append(amort_mesostrata[layer_i])\n        amort_sen_evol.append(amort_sen)\n\n        juros_sub_evol.append(juros_sub)\n        for layer_i, layer in enumerate(juros_mesostrata_evol):\n            layer.append(juros_mesostrata[layer_i])\n        juros_sen_evol.append(juros_sen)\n\n        if not current_layer == len(mesostrata) + 1:\n            if current_layer == 0 and saldo_sen <= 0 or \\\n               current_layer >= 1 and saldo_mesostrata[-current_layer] <= 0:\n                sen_finished = True\n                is_transitioning = True\n                current_layer += 1\n\n        sub_length += 1\n        if not sen_finished:\n            sen_length += 1\n\n    inv_flux = [-total, *np.zeros(c_period)]\n    for i in range(len(amort_sub_evol)):\n        inv_flux.append(amort_sub_evol[i] + juros_sub_evol[i] +\n                        sum([layer[i] for layer in amort_mesostrata_evol]) + sum([layer[i] for layer in juros_mesostrata_evol]) +\n                        amort_sen_evol[i] + juros_sen_evol[i])\n\n    irr = ((1 + np.irr(inv_flux)) ** 12 - 1) * 100\n\n    print('IRR -- PMT_PROPER -- TARGET_IRR / IRR -- T_EM_MENSAL')\n    print( '------', irr, pmt_proper, target_irr / irr, t_em_anual, '------')\n\n    if saldo_sub_evol[-1] > 0:\n        pmt_proper += .01\n    else:\n        if abs(target_irr - irr) > .04:\n            t_em_anual *= (target_irr / irr) ** (len(mesostrata) + 1)\n            t_em_mensal = (1 + t_em_anual) ** (1/12) - 1\n        else:\n            break\n\n# OUTPUT\n\nworkbook = xlsxwriter.Workbook(output_path)\nworkbook.set_size(1400, 1000)\ncurve_sheet = workbook.add_worksheet()\ncurve_sheet.hide_gridlines(2)\n\ncurve_sheet.insert_image('F2', '{}/logos-logo.png'.format(os.path.dirname(os.path.abspath(__file__))), {'x_scale': 0.75, 'y_scale': 0.85, 'x_offset': 10, 'y_offset': -10})\n\ncolumn_widths = [6, 18, 15.5, 14, 17.5, 19, 12, 13.5, 8, 6, 11, 8, 4, 6, 8, 13, 10, 12, 12, 11, 10, 4]\ncolumn_widths = column_widths + list(map(int, ('6 8 13 12 12 11 10 4 ' * (1 + len(mesostrata))).strip().split(' '))) + [6, 6, 12]\n\nfor i, w in enumerate(column_widths):\n    curve_sheet.set_column(i, i, w)\n\n# GENERAL STYLING SECTION\n\nprelude_header_format = workbook.add_format({\n    'bold': True,\n    'font_color': 'white',\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'border': 2,\n    'border_color': 'white',\n    'bg_color': '#3465FC'\n})\n\nprelude_text_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter'\n})\n\nprelude_percentage_0_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0%'\n})\n\nprelude_percentage_2_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0.00%'\n})\n\nprelude_percentage_4_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'align': 'center',\n    'valign': 'vcenter',\n    'num_format': '0.0000%'\n})\n\nprelude_quantity_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'valign': 'vcenter',\n    'num_format': '#,##0_);(#,##0)',\n})\n\nprelude_currency_format = workbook.add_format({\n    'font_name': 'arial',\n    'font_size': 9,\n    'bold': True,\n    'num_format': '_(\"R$\"* #,##0.00_);_(\"R$\"* (#,##0.00);_(\"R$\"* \"-\"??_);_(@_)'\n})\n\nsection_title_format = workbook.add_format({\n    'bold': True,\n    'italic': True,\n    'font_color': '#477DC0',\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center',\n    'valign': 'vcenter',\n    'top': 1,\n    'left': 1,\n    'right': 1\n})\n\n# END SECTION\n\n# FLUXO\n\ncurve_sheet.merge_range('J3:L4', 'Fluxo de Cr\u00e9ditos Imobili\u00e1rios', section_title_format)\n\nflux_y_offset = 5\n\nn_index_format_template = {\n    'align': 'center',\n    'left': 1\n}\nflux_format_template = {\n    'bold': True,\n    'num_format': '#,##0.00',\n    'align': 'left'\n}\ndate_format_template = {\n    'align': 'center',\n    'right': 1\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\nflux_format = workbook.add_format(flux_format_template)\ndate_format = workbook.add_format(date_format_template)\n\ncurve_sheet.write(flux_y_offset - 1, 9, 1, n_index_format)\ncurve_sheet.write(flux_y_offset - 1, 10, f_bound, flux_format)\ncurve_sheet.write(flux_y_offset - 1, 11, m_bound, date_format)\n\nfor i, m in enumerate(months):\n    n_index_format = workbook.add_format(n_index_format_template)\n    flux_format = workbook.add_format(flux_format_template)\n    date_format = workbook.add_format(date_format_template)\n\n    if i == len(months) - 1:\n        n_index_format.set_bottom(1)\n        flux_format.set_bottom(1)\n        date_format.set_bottom(1)\n\n    curve_sheet.write(i + flux_y_offset, 9, i + 2, n_index_format)\n    curve_sheet.write(i + flux_y_offset, 10, flux_total[i], flux_format)\n    curve_sheet.write(i + flux_y_offset, 11, m, date_format)\n\n    curve_sheet.set_row(i + flux_y_offset, 18)\n\n# END SECTION\n\nsaldo_sub = total * r_sub / 100\nsaldo_sen = total * r_sen / 100\n\n# PRELUDE SECTION\n\ndef write_prelude_section(x, y, title, values):\n    curve_sheet.write(y, x, title, prelude_header_format)\n    for i, (v, f) in enumerate(values):\n        curve_sheet.write(y + i + 1, x, v, f)\n\ndef get_relative_cell(c_r, c_c, d_r, d_c):\n    return xlsxwriter.utility.xl_rowcol_to_cell(c_r + d_r, c_c + d_c)\n\nwrite_prelude_section(1, 11, 'Taxa de Juros', [\n    (target_irr / 100, prelude_percentage_2_format)\n])\nwrite_prelude_section(2, 11, 'Valor Total', [\n    (total, prelude_currency_format)\n])\nwrite_prelude_section(4, 11, 'S\u00e9rie', [\n    ('S\u00eanior', prelude_text_format),\n    ('Subordinado', prelude_text_format)\n])\nwrite_prelude_section(5, 11, 'PU Emiss\u00e3o', [\n    (int(pu_emis), prelude_currency_format),\n    (int(pu_emis), prelude_currency_format)\n])\nwrite_prelude_section(6, 11, 'Indexador', [\n    (indexador, prelude_text_format),\n    (indexador, prelude_text_format)\n])\nwrite_prelude_section(7, 11, 'Taxa de Juros', [\n    (t_em_senior_anual, prelude_percentage_2_format),\n    (t_em_anual, prelude_percentage_2_format),\n])\n\n# ROW\n\nwrite_prelude_section(1, 16, 'S\u00e9rie', [\n    ('S\u00eanior', prelude_text_format),\n    ('Subordinado', prelude_text_format)\n])\nwrite_prelude_section(2, 16, 'PU Liquida\u00e7\u00e3o', [\n    (int(pu_emis), prelude_currency_format),\n    (int(pu_emis), prelude_currency_format)\n])\nwrite_prelude_section(3, 16, 'Quantidades', [\n    ('=E18/C18', prelude_quantity_format),\n    ('=E19/C19', prelude_quantity_format)\n])\nwrite_prelude_section(4, 16, 'Montante', [\n    ('=C13*G18', prelude_currency_format),\n    ('=C13*G19', prelude_currency_format)\n])\nwrite_prelude_section(5, 16, 'Prazo', [\n    ('{} meses'.format(sen_length), prelude_text_format),\n    ('{} meses'.format(sub_length), prelude_text_format)\n])\nwrite_prelude_section(6, 16, 'Raz\u00e3o', [\n    (r_sen / 100, prelude_percentage_0_format),\n    (r_sub / 100, prelude_percentage_0_format)\n])\nwrite_prelude_section(7, 16, '% PMT', [\n    (pmt_proper, prelude_percentage_0_format)\n])\n\n# ROW\n\nwrite_prelude_section(1, 21, 'Per\u00edodo', [\n    ('Mensal', prelude_text_format),\n    ('Anual', prelude_text_format)\n])\nwrite_prelude_section(2, 21, 'S\u00eanior', [\n    ('=(1+C24)^(1/12)-1', prelude_percentage_4_format),\n    (t_em_senior_anual, prelude_percentage_2_format)\n])\nwrite_prelude_section(3, 21, 'Subordinado', [\n    ('=(1+D24)^(1/12)-1', prelude_percentage_4_format),\n    (t_em_anual, prelude_percentage_2_format)\n])\n\ntranche_width = 7\nwrite_prelude_section(4, 21, 'TIR', [\n    ('=IRR({}:{})'.format(get_relative_cell(flux_y_offset - 1, 26 + tranche_width * (len(mesostrata) + 1), 0, 0),\n                          get_relative_cell(flux_y_offset - 1, 26 + tranche_width * (len(mesostrata) + 1), len(saldo_sub_evol), 0)), prelude_percentage_2_format),\n    ('=(1+E23)^12-1', prelude_percentage_2_format)\n])\n\nsub_y_offset = 3\nsub_y_init_offset = 5\n\nwrite_prelude_section(6, 21, 'FR 3 PMTS', [\n    ('=SUM(K{}:K{})*H18-SUM(Q{}:Q{})'.format(flux_y_offset, flux_y_offset + c_period, sub_y_offset + sub_y_init_offset, sub_y_offset + sub_y_init_offset + c_period), prelude_currency_format)\n])\nwrite_prelude_section(7, 21, 'FR Previsto', [\n    (fr_previsto, prelude_currency_format)\n])\n\n# ROW\n\nwrite_prelude_section(1, 26, 'Per\u00edodo', [\n    ('Mensal', prelude_text_format),\n    ('Anual', prelude_text_format)\n])\n\nfor i, layer in enumerate(mesostrata):\n    write_prelude_section(i + 2, 26, layer[0], [\n        (\n            '=(1+{})^(1/12)-1'.format(\n                get_relative_cell(27, i + 2, 1, 0)\n            ),\n             prelude_percentage_4_format\n        ),\n        (layer[2] / 100, prelude_percentage_2_format)\n    ])\n\n# END SECTION\n\n# SUBORDINATE TRANCHE\n\nl_border_format = workbook.add_format({'left': 1})\nr_border_format = workbook.add_format({'right': 1})\n\ndef patch_border(is_l, row, col, n):\n    for i in range(n):\n        if is_l:\n            curve_sheet.write(row + i, col, '', l_border_format)\n        else:\n            curve_sheet.write(row + i, col, '', r_border_format)\n\ncurve_sheet.merge_range('N3:U4', 'Tranche Subordinado', section_title_format)\n\ncol_headers = ['Saldo Devedor', 'Despesas', 'Juros', 'Amortiz', 'PMT', '% AM']\n\nheader_y_offset = 2\n\nfor i, h in enumerate(col_headers):\n    col_header_format = workbook.add_format({\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial'\n    })\n    if i == len(col_headers) - 1:\n        col_header_format.set_right(1)\n\n    curve_sheet.write(sub_y_offset + header_y_offset, i + 15, h, col_header_format)\n\nn_index_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center',\n    'left': 1\n}\ndate_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'align': 'center'\n}\nquantity_format_template = {\n    'font_name': 'arial',\n    'font_size': 10,\n    'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\ndate_format = workbook.add_format(date_format_template)\nquantity_format = workbook.add_format(quantity_format_template)\n\ninit_row = sub_y_offset + sub_y_init_offset - 1\ncurve_sheet.write(init_row, 13, 1, n_index_format)\ncurve_sheet.write(init_row, 14, m_bound, date_format)\ncurve_sheet.write(init_row, 15, saldo_sub, quantity_format)\n\npatch_border(True, 3, 13, 4)\npatch_border(False, 4, 20, 1)\npatch_border(False, 6, 20, 2)\n\ni = 0\nwhile saldo_sub_evol[i + 2] > 0:\n    prev_row = i + sub_y_offset + sub_y_init_offset\n    current_row = prev_row + 1\n\n    n_index_format = workbook.add_format(n_index_format_template)\n    date_format = workbook.add_format(date_format_template)\n    quantity_format = workbook.add_format(quantity_format_template)\n    percentage_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    })\n\n    if saldo_sub_evol[i + 3] <= 0:\n        n_index_format.set_bottom(1)\n        date_format.set_bottom(1)\n        quantity_format.set_bottom(1)\n        percentage_format.set_bottom(1)\n\n    i_val = m_val = s_val = d_val = j_val = a_val = pmt_val = p_val = ''\n\n    i_val = i + 2\n    m_val = months[i]\n    s_val = '=P{0}+Q{1}+R{1}-T{1}'.format(prev_row, current_row)\n    d_val = despesas\n    j_val = '=P{}*D23'.format(prev_row)\n\n    if saldo_sub_evol[i + 3] > 0:\n        if i >= c_period:\n            a_val = '=T{0}-R{0}-Q{0}'.format(current_row)\n\n            if saldo_mesostrata_evol[0][i + 1] > 0:\n                pmt_val = '=Q{0}+R{0}'.format(current_row)\n            elif saldo_mesostrata_evol[0][i] > 0:\n                pmt_val = '=K{}*H18-AB{}'.format(i + sub_y_offset + sub_y_init_offset - 3, current_row)\n            else:\n                pmt_val = '=K{}*H18'.format(i + sub_y_offset + sub_y_init_offset - 3)\n        else:\n            a_val = pmt_val = 0\n    else:\n        a_val = '=P{}'.format(prev_row)\n        pmt_val = '=Q{0}+R{0}+S{0}'.format(current_row)\n\n    p_val = '=S{}/P{}'.format(current_row, prev_row)\n\n    curve_sheet.write(prev_row, 13, i_val, n_index_format)\n    curve_sheet.write(prev_row, 14, m_val, date_format)\n    curve_sheet.write(prev_row, 15, s_val, quantity_format)\n    curve_sheet.write(prev_row, 16, d_val, quantity_format)\n    curve_sheet.write(prev_row, 17, j_val, quantity_format)\n    curve_sheet.write(prev_row, 18, a_val, quantity_format)\n    curve_sheet.write(prev_row, 19, pmt_val, quantity_format)\n    curve_sheet.write(prev_row, 20, p_val, percentage_format)\n\n    i += 1\n\n# END SECTION\n\n# INTERMEDIARY TRANCHES\n\ninitial_column_position = 22\nfor layer_i, layer in enumerate(mesostrata):\n    column_base_position = initial_column_position + layer_i * tranche_width + layer_i\n    curve_sheet.merge_range(2, column_base_position, 3,  column_base_position + tranche_width - 1, layer[0], section_title_format)\n\n    col_headers = ['Saldo Devedor', 'Juros', 'Amortiz', 'PMT', '% AM']\n\n    header_y_offset = 2\n\n    for i, h in enumerate(col_headers):\n        col_header_format = workbook.add_format({\n            'bold': True,\n            'align': 'center',\n            'font_size': 10,\n            'font_name': 'arial'\n        })\n        if i == len(col_headers) - 1:\n            col_header_format.set_right(1)\n\n        curve_sheet.write(sub_y_offset + header_y_offset, i + column_base_position + 2, h, col_header_format)\n\n    n_index_format_template = {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'left': 1\n    }\n    date_format_template = {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center'\n    }\n    quantity_format_template = {\n        'font_name': 'arial',\n        'font_size': 10,\n        'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n    }\n\n    n_index_format = workbook.add_format(n_index_format_template)\n    date_format = workbook.add_format(date_format_template)\n    quantity_format = workbook.add_format(quantity_format_template)\n\n    init_row = sub_y_offset + sub_y_init_offset - 1\n    curve_sheet.write(init_row, column_base_position, 1, n_index_format)\n    curve_sheet.write(init_row, column_base_position + 1, m_bound, date_format)\n    curve_sheet.write(init_row, column_base_position + 2, total * layer[1] / 100, quantity_format)\n\n    patch_border(True, 3, column_base_position, 4)\n    patch_border(False, 4, column_base_position + tranche_width - 1, 1)\n    patch_border(False, 6, column_base_position + tranche_width - 1, 2)\n\n    i = 0\n    while saldo_mesostrata_evol[layer_i][max(i, 0)] > 0:\n        current_row = i + sub_y_offset + sub_y_init_offset\n\n        n_index_format = workbook.add_format(n_index_format_template)\n        date_format = workbook.add_format(date_format_template)\n        quantity_format = workbook.add_format(quantity_format_template)\n        percentage_format = workbook.add_format({\n            'font_name': 'arial',\n            'font_size': 10,\n            'align': 'center',\n            'right': 1,\n            'num_format': '0.0000%'\n        })\n\n        if saldo_mesostrata_evol[layer_i][i + 1] <= 0:\n            n_index_format.set_bottom(1)\n            date_format.set_bottom(1)\n            quantity_format.set_bottom(1)\n            percentage_format.set_bottom(1)\n\n        i_val = m_val = s_val = j_val = a_val = pmt_val = p_val = ''\n\n        i_val = i + 2\n        m_val = months[i]\n\n        saldo_col = column_base_position + 2\n        prev_saldo_cell = get_relative_cell(current_row, saldo_col, -1, 0)\n        s_val = '={}+{}-{}'.format(\n            prev_saldo_cell,\n            get_relative_cell(current_row, saldo_col, 0, 1),\n            get_relative_cell(current_row, saldo_col, 0, 3)\n        )\n        j_val = '={}*{}'.format(prev_saldo_cell, get_relative_cell(27, layer_i + 2, 0, 0))\n\n        if saldo_mesostrata_evol[layer_i][i + 1] > 0:\n            if i >= c_period:\n                a_val = '={}-{}'.format(\n                    get_relative_cell(current_row, saldo_col, 0, 3),\n                    get_relative_cell(current_row, saldo_col, 0, 1)\n                )\n\n                if saldo_sen_evol[i] > 0:\n                    pmt_val = '={}'.format(\n                        get_relative_cell(current_row, saldo_col, 0, 1)\n                    )\n                elif saldo_sen_evol[i - 1] > 0:\n                    pmt_val = '=K{}*H18-{}'.format(\n                        current_row,\n                        get_relative_cell(current_row, saldo_col + 3, 0, tranche_width)\n                    )\n                else:\n                    pmt_val = '=K{}*H18'.format(current_row)\n            else:\n                a_val = pmt_val = 0\n        else:\n            a_val = '={}'.format(prev_saldo_cell)\n            pmt_val = '={}+{}'.format(\n                get_relative_cell(current_row, saldo_col, 0, 1),\n                get_relative_cell(current_row, saldo_col, 0, 2)\n            )\n\n        p_val = '={}/{}'.format(\n            get_relative_cell(current_row, saldo_col, 0, 2),\n            prev_saldo_cell\n        )\n\n        curve_sheet.write(current_row, column_base_position, i_val, n_index_format)\n        curve_sheet.write(current_row, column_base_position + 1, m_val, date_format)\n        curve_sheet.write(current_row, column_base_position + 2, s_val, quantity_format)\n        curve_sheet.write(current_row, column_base_position + 3, j_val, quantity_format)\n        curve_sheet.write(current_row, column_base_position + 4, a_val, quantity_format)\n        curve_sheet.write(current_row, column_base_position + 5, pmt_val, quantity_format)\n        curve_sheet.write(current_row, column_base_position + 6, p_val, percentage_format)\n\n        i += 1\n\nultimate_intermediary_offset = tranche_width * len(mesostrata) + initial_column_position + len(mesostrata)\n\n# END SECTION\n\n# SENIOR TRANCHE\n\ncurve_sheet.merge_range(2, ultimate_intermediary_offset, 3, ultimate_intermediary_offset + tranche_width - 1, 'Tranche S\u00eanior', section_title_format)\ncol_headers = ['Saldo Devedor', 'Juros', 'Amortiz', 'PMT', '% AM']\n\nis_finished = False\n\nfor i, saldo in enumerate(saldo_sen_evol):\n    current_row = i + sub_y_offset\n\n    n_index_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'left': 1\n    })\n    date_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center'\n    })\n    quantity_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n    })\n    percentage_format = workbook.add_format({\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    })\n\n    i_val = m_val = s_val = j_val = a_val = pmt_val = p_val = ''\n\n    if i >= sub_y_init_offset:\n        i_val = i - sub_y_init_offset + 2\n        m_val = months[i - sub_y_init_offset]\n\n        saldo_col = ultimate_intermediary_offset + 2\n        prev_saldo_cell = get_relative_cell(current_row, saldo_col, -1, 0)\n        s_val = '={}+{}-{}'.format(\n            prev_saldo_cell,\n            get_relative_cell(current_row, saldo_col, 0, 1),\n            get_relative_cell(current_row, saldo_col, 0, 3)\n        )\n        j_val = '={}*C23'.format(prev_saldo_cell)\n\n        if i - sub_y_init_offset >= c_period:\n            if saldo_sen_evol[i - sub_y_offset - 2] > 0:\n                a_val = '={}-{}'.format(\n                    get_relative_cell(current_row, saldo_col + 2, 0, 1),\n                    get_relative_cell(current_row, saldo_col + 2, 0, -1)\n                )\n                mesostrata_pmts = '-'.join([get_relative_cell(current_row, saldo_col - (tranche_width + 1) * i, 0, -5) for i in range(len(mesostrata))])\n                pmt_val = '=K{}*H18-{}-T{}'.format(\n                    i + sub_y_offset - 3,\n                    mesostrata_pmts,\n                    current_row + 1\n                )\n            else:\n                a_val = '={}'.format(get_relative_cell(current_row, saldo_col, -1, 0))\n                pmt_val = '={}+{}'.format(\n                    get_relative_cell(current_row, saldo_col + 3, 0, -1),\n                    get_relative_cell(current_row, saldo_col + 3, 0, -2)\n                )\n\n                n_index_format.set_bottom(1)\n                date_format.set_bottom(1)\n                quantity_format.set_bottom(1)\n                percentage_format.set_bottom(1)\n\n                is_finished = True\n        else:\n            a_val = 0\n            pmt_val = 0\n\n        p_val = '={}/{}'.format(\n            get_relative_cell(current_row, saldo_col + 2, 0, 0),\n            get_relative_cell(current_row, saldo_col, -1, 0)\n        )\n    elif i == sub_y_init_offset - 1:\n        i_val = i - sub_y_init_offset + 2\n        m_val = m_bound\n        s_val = saldo_sen\n\n    curve_sheet.write(current_row, ultimate_intermediary_offset, i_val, n_index_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 1, m_val, date_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 2, s_val, quantity_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 3, j_val, quantity_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 4, a_val, quantity_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 5, pmt_val, quantity_format)\n    curve_sheet.write(current_row, ultimate_intermediary_offset + 6, p_val, percentage_format)\n\n    if i == header_y_offset:\n        for j, h in enumerate(col_headers):\n            col_header_format = workbook.add_format({\n                'bold': True,\n                'align': 'center',\n                'font_size': 10,\n                'font_name': 'arial'\n            })\n            if j == len(col_headers) - 1:\n                col_header_format.set_right(1)\n\n            curve_sheet.write(current_row, j + ultimate_intermediary_offset + 2, h, col_header_format)\n\n    if is_finished:\n        break\n\n# END SECTION\n\n# FINANCIAL FLUX\ncurve_sheet.merge_range(2, ultimate_intermediary_offset + tranche_width + 1, 3, ultimate_intermediary_offset + tranche_width + 3, 'Fluxo Financeiro', section_title_format)\n\ncurrency_format_template = {\n    'font_name': 'arial',\n    'font_size': 9,\n    'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-',\n    'right': 1\n}\n\nn_index_format = workbook.add_format(n_index_format_template)\ndate_format = workbook.add_format(date_format_template)\ncurrency_format = workbook.add_format(currency_format_template)\n\ncurve_sheet.write(4, ultimate_intermediary_offset + tranche_width + 1, 1, n_index_format)\ncurve_sheet.write(4, ultimate_intermediary_offset + tranche_width + 2, m_bound, date_format)\ncurve_sheet.write(4, ultimate_intermediary_offset + tranche_width + 3, -total, currency_format)\n\nfor i, m in enumerate(months):\n    if i >= len(saldo_sub_evol):\n        break\n\n    n_index_format = workbook.add_format(n_index_format_template)\n    date_format = workbook.add_format(date_format_template)\n    currency_format = workbook.add_format(currency_format_template)\n\n    if i == len(saldo_sub_evol) - 1:\n        n_index_format.set_bottom(1)\n        date_format.set_bottom(1)\n        currency_format.set_bottom(1)\n\n    curve_sheet.write(i + flux_y_offset, ultimate_intermediary_offset + tranche_width + 1, i + 2, n_index_format)\n    curve_sheet.write(i + flux_y_offset, ultimate_intermediary_offset + tranche_width + 2, m, date_format)\n\n    c_val = ''\n    if i < c_period:\n        c_val = 0\n    else:\n        current_row = i + flux_y_offset + 3\n        c_val = '=R{0}+S{0}'.format(current_row + 1)\n        c_val += '+'.join([''] + [get_relative_cell(current_row, ultimate_intermediary_offset + 3 - (tranche_width + 1) * i, 0, 0) for i in range(len(mesostrata) + 1)])\n        c_val += '+'.join([''] + [get_relative_cell(current_row, ultimate_intermediary_offset + 3 - (tranche_width + 1) * i, 0, 1) for i in range(len(mesostrata) + 1)])\n    curve_sheet.write(i + flux_y_offset, ultimate_intermediary_offset + tranche_width + 3, c_val, currency_format)\n\n    curve_sheet.set_row(i + flux_y_offset, 18)\n\n# END SECTION\n\nworkbook.close()\n"}