{"tranche.py": "class Tranche():\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period, despesas=None):\n        self.title = title\n        self.saldo = saldo\n        self.taxa_juros = taxa_juros\n        self.pmt_proper = pmt_proper\n        self.c_period = c_period\n        self.despesas = despesas\n\n        self.is_finished = False\n        self.phase_list = []\n        self.row_list = []\n\n        self.queue = None\n\n        self.i = 0\n\n    def next_phase(self):\n        self.phase_list = self.phase_list[1:]\n\n    def integrate_row(self):\n        if self.queue:\n            self.row_list.append(self.queue)\n            self.i += 1\n\n    def get_previous_row(self):\n        return self.row_list[-1]\n\n    def get_completion_state(self):\n        if self.saldo <= 0:\n            self.is_finished = True\n            return True\n        return False\n\n    def calculate(self, i, F_i, tranche_list, tranche_i):\n        if len(self.phase_list):\n            repeats_calculation = self.phase_list[0](self, i, F_i, tranche_list, tranche_i)\n            if repeats_calculation:\n                self.phase_list[0](self, i, F_i, tranche_list, tranche_i)\n        else:\n            self.queue = None\n\n", "spreadsheet.py": "import xlsxwriter\nfrom xlsxwriter.utility import xl_rowcol_to_cell\n\nimport render_style\nimport prelude_matrix\n\nimport copy\n\nimport re\n\nclass Spreadsheet():\n    def __init__(self, inputs, fluxo_creditos, months, taxa_juros_sub, taxa_juros_anual_sub, tranche_list, sub_length, sen_length, fluxo_financeiro):\n        self.inputs = inputs\n        self.months = months\n        self.fluxo_creditos = fluxo_creditos\n        self.tranche_list = tranche_list\n        self.fluxo_financeiro = fluxo_financeiro\n\n        self.workbook = xlsxwriter.Workbook(inputs.output_path)\n        self.workbook.set_size(1400, 1000)\n\n        self.sheet = self.workbook.add_worksheet()\n        self.sheet.hide_gridlines(2)\n        self.sheet.set_default_row(18)\n\n        self.sheet.insert_image(\n            'F2',\n            '../logos-logo.png',\n            {\n                'x_scale': 0.75,\n                'y_scale': 0.85,\n                'x_offset': 10,\n                'y_offset': -10\n            }\n        )\n\n        self.formats = {}\n        for key, style in render_style.formats.items():\n            if style['is_template']:\n                self.formats[key] = style['format']\n            else:\n                self.formats[key] = self.workbook.add_format(style['format'])\n\n        self.p_matrix = prelude_matrix.create_matrix(\n            self.inputs,\n            taxa_juros_sub,\n            taxa_juros_anual_sub,\n            sub_length,\n            sen_length\n        )\n\n        self.x_margin = 1\n\n        self.prelude_x = 1\n        self.prelude_y = 11\n        self.prelude_width = len(self.p_matrix[0])\n\n        self.fluxo_creditos_x = self.prelude_x + \\\n            self.prelude_width + \\\n            self.x_margin\n\n        self.fluxo_creditos_y = 2\n        self.fluxo_creditos_width = 3\n\n        self.tranches_x = self.fluxo_creditos_x + \\\n            self.fluxo_creditos_width + \\\n            self.x_margin\n\n        self.tranches_y = 2\n        self.subordinate_tranche_width = 8\n        self.normal_tranche_width = 7\n\n        self.tranche_width = self.subordinate_tranche_width + \\\n            self.x_margin + \\\n            self.normal_tranche_width\n\n        for _ in range(len(tranche_list) - 2):\n            self.tranche_width += self.normal_tranche_width + self.x_margin\n\n        self.fluxo_fin_x = self.tranches_x + self.tranche_width + self.x_margin\n        self.fluxo_fin_y = 2\n        self.fluxo_fin_width = 3\n\n    def substitute_static(self, pos):\n        groups = re.match(r'^([A-Z]+)(\\d+)$', pos)\n        return '${}${}'.format(groups[1], groups[2])\n\n    def render_prelude(self):\n        row_margin = 2\n\n        spreadsheet_row = self.prelude_y\n\n        title_height = 1\n\n        self.position_matrix = {}\n\n        for row in self.p_matrix:\n            max_length = 1\n\n            for cell_i, cell in enumerate(row):\n                if 'title' in cell:\n                    title, body, body_format = list(cell.values())\n\n                    current_cell = cell_i + self.prelude_x\n\n                    self.sheet.write(\n                        spreadsheet_row,\n                        current_cell,\n                        title,\n                        self.formats['prelude_header']\n                    )\n\n                    for body_row_i, body_row in enumerate(body):\n                        current_row = spreadsheet_row + body_row_i + 1\n\n                        adjusted_position_matrix = self.position_matrix.copy()\n                        for a_title, position in adjusted_position_matrix.items():\n                            adjusted_position_matrix[a_title] = self.substitute_static(\n                                xl_rowcol_to_cell(\n                                    position[0] + min(body_row_i, position[2]) + 1,\n                                    position[1]\n                                )\n                            )\n\n                        format_inputs = {\n                            'i_next': xl_rowcol_to_cell(current_row, current_cell + 1),\n                            'i_prev': xl_rowcol_to_cell(current_row, current_cell - 1),\n                            'fluxo_fin_start': xl_rowcol_to_cell(self.fluxo_fin_y + 2, self.fluxo_fin_x + 1),\n                            'fluxo_fin_end': xl_rowcol_to_cell(self.fluxo_fin_y + len(self.fluxo_financeiro) + 2, self.fluxo_fin_x + 1),\n                            'prev_body': xl_rowcol_to_cell(current_row - 1, current_cell),\n                            'fluxo_3_sum_terms': '{}:{}'.format(\n                                xl_rowcol_to_cell(\n                                    self.fluxo_creditos_y + 2, self.fluxo_creditos_x + 1\n                                ),\n                                xl_rowcol_to_cell(\n                                    self.fluxo_creditos_y + 4, self.fluxo_creditos_x + 1\n                                )\n                            ),\n                            'despesas_3_sum_terms': '{}:{}'.format(\n                                xl_rowcol_to_cell(\n                                    self.tranches_y + 6, self.tranches_x + 3\n                                ),\n                                xl_rowcol_to_cell(\n                                    self.tranches_y + 8, self.tranches_x + 3\n                                )\n                            ),\n                            **adjusted_position_matrix\n                        }\n\n                        self.sheet.write(\n                            current_row,\n                            current_cell,\n                            body_row.format(**format_inputs),\n                            self.formats[\n                                body_format[\n                                    min(body_row_i, len(body_format) - 1)\n                                ]\n                            ]\n                        )\n\n                    self.position_matrix[title.replace(' ', '_').replace('%', 'P')] = [\n                        spreadsheet_row, current_cell, len(body) - 1\n                    ]\n\n            spreadsheet_row += max_length + title_height + row_margin\n\n    def render_fluxo_creditos(self):\n        self.sheet.merge_range(\n            self.fluxo_creditos_y,\n            self.fluxo_creditos_x,\n            self.fluxo_creditos_y + 1,\n            self.fluxo_creditos_x + self.fluxo_creditos_width - 1,\n            'Fluxo de Cr\u00e9ditos Imobili\u00e1rios',\n            self.formats['section_title']\n        )\n\n        for i, fluxo_row in enumerate(self.fluxo_creditos):\n            row_offset = self.fluxo_creditos_y + i + 2\n\n            current_index_format_template = copy.copy(self.formats['n_index'])\n            current_fluxo_format_template = copy.copy(self.formats['fluxo'])\n            current_date_format_template = copy.copy(self.formats['date'])\n\n            if i == len(self.fluxo_creditos) - 1:\n                current_index_format_template['bottom'] = 1\n                current_fluxo_format_template['bottom'] = 1\n                current_date_format_template['bottom'] = 1\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x,\n                i + 1,\n                self.workbook.add_format(current_index_format_template)\n            )\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x + 1,\n                fluxo_row,\n                self.workbook.add_format(current_fluxo_format_template)\n            )\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x + 2,\n                self.months[i],\n                self.workbook.add_format(current_date_format_template)\n            )\n\n    def render_empty_tranche_row(self, row, cell, width, border_balance):\n        for i in range(width):\n            border_template = self.workbook.add_format({})\n\n            if i == 0 and (border_balance < 1):\n                border_template.set_left(1)\n\n            if i == width - 1 and (border_balance > -1):\n                border_template.set_right(1)\n\n            self.sheet.write(\n                row,\n                cell + i,\n                '',\n                border_template\n            )\n\n    def render_tranches(self):\n        for tranche_i, tranche in enumerate(self.tranche_list):\n            col_offset = self.tranches_x + \\\n                tranche_i * self.normal_tranche_width + \\\n                min(tranche_i, 1) + \\\n                self.x_margin * tranche_i\n\n            self.sheet.merge_range(\n                self.tranches_y,\n                col_offset,\n                self.tranches_y + 1,\n                col_offset + self.subordinate_tranche_width - min(tranche_i, 1) - 1,\n                'Tranche {}'.format(tranche.title),\n                self.formats['section_title']\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 2,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n            self.render_empty_tranche_row(self.tranches_y + 3, col_offset, 1, -1)\n\n            header_offset = 2\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Saldo Devedor',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            if tranche_i == 0:\n                self.sheet.write(\n                    self.tranches_y + 3,\n                    col_offset + header_offset,\n                    'Despesas',\n                    self.formats['tranche_header_col']\n                )\n                header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Juros',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Amortiz',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'PMT',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                '% AM',\n                self.formats['east_tranche_header_col']\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 4,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 5,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset,\n                '=1',\n                self.workbook.add_format(self.formats['n_index'])\n            )\n\n            date_format_template = copy.copy(self.formats['date'])\n            date_format_template['right'] = 0\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset + 1,\n                self.months[0],\n                self.workbook.add_format(date_format_template)\n            )\n\n            quantity_format_template = copy.copy(self.formats['quantity'])\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset + 2,\n                '={}'.format(self.inputs.total * self.inputs.razoes[tranche_i]),\n                self.workbook.add_format(quantity_format_template)\n            )\n\n            row_offset = self.tranches_y + 6\n            for row_i, row in enumerate(tranche.row_list):\n                index_format_template = copy.copy(self.formats['n_index'])\n                percentage_format_template = copy.copy(self.formats['percentage'])\n\n                taxa_juros_pos = copy.copy(self.position_matrix[tranche.title])\n                taxa_juros_pos[0] = taxa_juros_pos[0] + 1\n                taxa_juros_pos = self.substitute_static(\n                    xl_rowcol_to_cell(\n                        taxa_juros_pos[0],\n                        taxa_juros_pos[1]\n                    )\n                )\n\n                pmt_proper_pos = copy.copy(self.position_matrix['P_PMT'])\n                pmt_proper_pos[0] = pmt_proper_pos[0] + 1\n                pmt_proper_pos = self.substitute_static(\n                    xl_rowcol_to_cell(\n                        pmt_proper_pos[0],\n                        pmt_proper_pos[1]\n                    )\n                )\n\n                if row_i == len(tranche.row_list) - 1:\n                    index_format_template['bottom'] = 1\n                    date_format_template['bottom'] = 1\n                    quantity_format_template['bottom'] = 1\n                    percentage_format_template['bottom'] = 1\n\n                col_inner_offset = col_offset\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '={}'.format(row_i + 2),\n                    self.workbook.add_format(index_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    self.months[row_i + 1],\n                    self.workbook.add_format(date_format_template)\n                )\n                col_inner_offset += 1\n\n                formatted_formulae = {\n                    'prev_saldo': xl_rowcol_to_cell(row_offset - 1, col_offset + 2),\n                    'taxa_juros': taxa_juros_pos,\n                    'despesas': xl_rowcol_to_cell(row_offset, col_offset + 3),\n                    'juros': xl_rowcol_to_cell(row_offset, col_offset + 4 - min(tranche_i, 1)),\n                    'pmt': xl_rowcol_to_cell(row_offset, col_offset + 6 - min(tranche_i, 1)),\n                    'F_i': xl_rowcol_to_cell(\n                        self.fluxo_creditos_y + 2 + row_i,\n                        self.fluxo_creditos_x + 1\n                    ),\n                    'pmt_proper': pmt_proper_pos,\n                    'pmt_next': xl_rowcol_to_cell(\n                        row_offset,\n                        col_offset + self.subordinate_tranche_width + 6 - min(tranche_i, 1)\n                    ),\n                    'amort': xl_rowcol_to_cell(row_offset, col_offset + 5 - min(tranche_i, 1)),\n                    'row_sum': '-'.join([\n                        str(xl_rowcol_to_cell(\n                            row_offset,\n                            col_offset - 3 - i * (self.normal_tranche_width + 1)\n                        ))\n                    for i in range(len(self.tranche_list) - 1)])\n                }\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['saldo'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                if tranche_i == 0:\n                    self.sheet.write(\n                        row_offset,\n                        col_inner_offset,\n                        '={}'.format(row.despesas),\n                        self.workbook.add_format(quantity_format_template)\n                    )\n                    col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['juros'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['amort'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['pmt'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '={}/{}'.format(\n                        formatted_formulae['amort'],\n                        formatted_formulae['prev_saldo']\n                    ),\n                    self.workbook.add_format(percentage_format_template)\n                )\n\n                row_offset += 1\n\n    def render_fluxo_financeiro(self):\n        self.sheet.merge_range(\n            self.fluxo_fin_y,\n            self.fluxo_fin_x,\n            self.fluxo_fin_y + 1,\n            self.fluxo_fin_x + 2,\n            'Fluxo Financeiro',\n            self.formats['section_title']\n        )\n\n        for row_i, row in enumerate(self.fluxo_financeiro):\n            row_offset = self.fluxo_fin_y + 2 + row_i\n            tranche_displacement_offset = 3\n\n            n_index_format_template = copy.copy(self.formats['n_index'])\n            quantity_format_template = copy.copy(self.formats['quantity'])\n            date_format_template = copy.copy(self.formats['date'])\n\n            if row_i == len(self.fluxo_financeiro) - 1:\n                n_index_format_template['bottom'] = 1\n                quantity_format_template['bottom'] = 1\n                date_format_template['bottom'] = 1\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x,\n                row_i + 1,\n                self.workbook.add_format(n_index_format_template)\n            )\n\n            quantity = '0'\n            if row_i == 0:\n                quantity = str(-self.inputs.total)\n            elif row_i > self.inputs.c_period:\n                quantity = '+'.join([\n                    '{}+{}'.format(\n                        xl_rowcol_to_cell(\n                            row_offset + tranche_displacement_offset,\n                            self.tranches_x + i * (self.normal_tranche_width + 1) + 4\n                        ),\n                        xl_rowcol_to_cell(\n                            row_offset + tranche_displacement_offset,\n                            self.tranches_x + i * (self.normal_tranche_width + 1) + 5\n                        )\n                    )\n                    for i in range(len(self.tranche_list))\n                ])\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x + 1,\n                '=' + quantity,\n                self.workbook.add_format(quantity_format_template)\n            )\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x + 2,\n                self.months[row_i],\n                self.workbook.add_format(date_format_template)\n            )\n\n    def resize_columns(self):\n        column_widths = [6, 18, 15.5, 14, 17.5, 19, 12, 13.5,\n                         8, 6, 11, 8, 4, 6, 8, 13, 10, 12, 12, 11, 10, 4]\n\n        for _ in range(len(self.tranche_list) - 1):\n            column_widths += [6, 8, 13, 12, 12, 11, 10, 4]\n\n        column_widths += [6, 14, 8]\n\n        for i, width in enumerate(column_widths):\n            self.sheet.set_column(i, i, width)\n\n    def render_file(self):\n        self.workbook.close()\n", "render_style.py": "formats = {}\n\nformats['prelude_header'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'font_color': 'white',\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'border': 2,\n        'border_color': 'white',\n        'bg_color': '#3465FC'\n    }\n}\n\nformats['prelude_text'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter'\n    }\n}\n\nformats['prelude_percentage_0'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0%'\n    }\n}\n\nformats['prelude_percentage_2'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0.00%'\n    }\n}\n\nformats['prelude_percentage_4'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0.0000%'\n    }\n}\n\nformats['prelude_quantity'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'valign': 'vcenter',\n        'num_format': '#,##0_);(#,##0)',\n    }\n}\n\nformats['prelude_currency'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'bold': True,\n        'num_format': '_(\"R$\"* #,##0.00_);_(\"R$\"* (#,##0.00);_(\"R$\"* \"-\"??_);_(@_)'\n    }\n}\n\nformats['section_title'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'italic': True,\n        'font_color': '#477DC0',\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'valign': 'vcenter',\n        'top': 1,\n        'left': 1,\n        'right': 1\n    }\n}\n\nformats['n_index'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'left': 1\n    }\n}\n\nformats['fluxo'] = {\n    'is_template': True,\n    'format': {\n        'bold': True,\n        'num_format': '#,##0.00',\n        'align': 'left'\n    }\n}\n\nformats['date'] = {\n    'is_template': True,\n    'format': {\n        'align': 'left',\n        'right': 1\n    }\n}\n\nformats['tranche_header_col'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial'\n    }\n}\n\nformats['east_tranche_header_col'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial',\n        'right': 1\n    }\n}\n\nformats['quantity'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n    }\n}\n\nformats['percentage'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    }\n}\n", "subordinate_tranche.py": "import tranche\nimport tranche_row\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + self.despesas + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(\n            formulae, pmt, amort, juros, saldo, self.despesas)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef dependent_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    pmt = juros + self.despesas\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{despesas}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n\ndef transition_phase(self, _1, F_i, tranche_list, _2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - tranche_list[1].queue.pmt\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{pmt_next}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n    self.next_phase()\n\n\ndef main_phase(self, i, F_i, *_2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = self.despesas + juros + amort\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{despesas}+{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass SubordinateTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period, despesas):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period, despesas)\n\n        self.phase_list = [\n            carencia_phase, dependent_phase, transition_phase, main_phase, final_phase\n        ]\n", "senior_tranche.py": "import tranche\nimport tranche_row\n\nfrom functools import reduce\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef main_phase(self, _1, F_i, tranche_list, _2):\n    row_sum = reduce(lambda acc, tranche: acc +\n                     tranche.queue.pmt, tranche_list[:-1], 0)\n\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - row_sum\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{row_sum}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = juros + amort\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass SeniorTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period)\n\n        self.phase_list = [\n            carencia_phase, main_phase, final_phase\n        ]\n", "session.py": "import tranche\nimport subordinate_tranche\nimport mezanine_tranche\nimport senior_tranche\n\n\nclass Session():\n    def __init__(self, c_period, saldo, razoes_saldo, taxas_juros, pmt_proper, despesas, fluxo_creditos):\n        self.c_period = c_period\n\n        self.tranche_list = []\n        self.final_tranche_list = []\n\n        self.total = saldo\n\n        saldo_sub = saldo * razoes_saldo[0]\n        taxa_juros_sub = taxas_juros[0]\n        tranche_sub = subordinate_tranche.SubordinateTranche(\n            'Subordinado', saldo_sub, taxa_juros_sub, pmt_proper, c_period, despesas\n        )\n        self.tranche_list.append(tranche_sub)\n\n        for i in range(len(razoes_saldo) - 2):\n            saldo_mez = saldo * razoes_saldo[i + 1]\n            taxa_juros_mez = taxas_juros[i + 1]\n            tranche_mez = mezanine_tranche.MezanineTranche(\n                'Mezanino', saldo_mez, taxa_juros_mez, pmt_proper, c_period\n            )\n            self.tranche_list.append(tranche_mez)\n\n        saldo_sen = saldo * razoes_saldo[-1]\n        taxa_juros_sen = taxas_juros[-1]\n        tranche_sen = senior_tranche.SeniorTranche(\n            'S\u00eanior', saldo_sen, taxa_juros_sen, pmt_proper, c_period\n        )\n        self.tranche_list.append(tranche_sen)\n\n        self.fluxo_creditos = fluxo_creditos\n\n    def calculate_row(self, i, F_i, tranche_list):\n        for tranche_i, tranche in enumerate(tranche_list):\n            tranche.calculate(i, F_i, self.tranche_list, tranche_i)\n\n    def run(self):\n        for i in range(len(self.fluxo_creditos) - 1):\n            i += 1\n            self.calculate_row(\n                i,\n                self.fluxo_creditos[i - 1],\n                self.tranche_list\n            )\n            for tranche_i, tranche in enumerate(self.tranche_list):\n                if tranche.queue and tranche.queue.saldo <= 0:\n                    tranche.next_phase()\n                    if tranche_i > 0:\n                        self.tranche_list[tranche_i - 1].next_phase()\n\n                    tranche.calculate(i, self.fluxo_creditos[i - 1], self.tranche_list, tranche_i)\n\n                    self.calculate_row(\n                        i,\n                        self.fluxo_creditos[i - 1],\n                        self.tranche_list[:tranche_i]\n                    )\n\n                    break\n\n            for tranche in self.tranche_list:\n                if tranche.queue:\n                    tranche.integrate_row()\n                    tranche.saldo = tranche.queue.saldo\n\n    def collapse_financial_flux(self):\n        collapsed = [0 for _ in self.tranche_list[0].row_list]\n        for tranche in self.tranche_list:\n            for i, row in enumerate(tranche.row_list):\n                collapsed[i] = collapsed[i] + row.juros + row.amort\n        return [-self.total] + [0 for _ in range(self.c_period)] + collapsed[self.c_period:]\n", "parse_input.py": "import sys\nimport json\n\nimport locale\nimport time\n\n\nclass Input():\n    def __init__(self):\n        self.raw_inputs = json.loads(sys.stdin.readlines()[0])\n\n        self.saldo_files = self.raw_inputs['inputFiles']\n        self.output_path = self.raw_inputs['outputFile']\n        self.indexador = self.raw_inputs['indexador']\n        self.pu_emis = self.raw_inputs['pu-emis']\n        self.total = self.raw_inputs['total']\n        self.razoes = self.raw_inputs['razoes']\n        self.target_irr = self.raw_inputs['target-irr']\n        self.taxas_juros = self.raw_inputs['taxas-juros']\n        self.c_period = self.raw_inputs['c-period']\n        self.fr_previsto = self.raw_inputs['fr-previsto']\n        self.pmt_proper = self.raw_inputs['pmt-proper']\n        self.despesas = self.raw_inputs['despesas']\n        self.starting_date = self.raw_inputs['starting-date']\n\n        self.parse_inputs()\n\n    def parse_inputs(self):\n        self.indexador = int(self.indexador)\n        self.pu_emis = float(self.pu_emis)\n        self.total = float(self.total)\n        self.razoes = [float(razao) / 100 for razao in self.razoes]\n        self.target_irr = float(self.target_irr)\n        self.taxas_juros_anual = [float(taxa) / 100 for taxa in self.taxas_juros]\n        self.taxas_juros = [\n            (1 + float(taxa) / 100) ** (1/12) - 1 for taxa in self.taxas_juros\n        ]\n        self.c_period = int(self.c_period)\n        self.fr_previsto = float(self.fr_previsto)\n        self.pmt_proper = float(self.pmt_proper) / 100\n        self.despesas = float(self.despesas)\n\n        locale.setlocale(locale.LC_TIME, 'pt_BR')\n        self.starting_date = time.strptime(self.starting_date, '%b/%Y')\n", "tranche_row.py": "class TrancheRow():\n    def __init__(self, formulae, pmt, amort, juros, saldo, despesas=None):\n        self.formulae = formulae\n        self.pmt = pmt\n        self.amort = amort\n        self.juros = juros\n        self.saldo = saldo\n        self.despesas = despesas\n", "prelude_matrix.py": "def create_matrix(inputs, taxas_juros_sub, taxas_juros_anual_sub, sub_length, sen_length):\n    return [\n        [\n            {\n                'title': 'Valor Total',\n                'body': [\n                    '=' + str(inputs.total)\n                ],\n                'format': ['prelude_currency']\n            },\n            {},\n            {},\n            {\n                'title': 'S\u00e9rie',\n                'body': [\n                    'S\u00eanior',\n                    'Subordinado'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'PU Emiss\u00e3o',\n                'body': [\n                    '=' + str(inputs.pu_emis),\n                    '=' + str(inputs.pu_emis)\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Indexador',\n                'body': [\n                    '=' + str(inputs.indexador),\n                    '=' + str(inputs.indexador)\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'Taxa de Juros',\n                'body': [\n                    '=' + str(inputs.taxas_juros_anual[len(inputs.taxas_juros_anual) - 1]),\n                    '=' + str(taxas_juros_anual_sub)\n                ],\n                'format': ['prelude_percentage_2']\n            }\n        ],\n        [\n            {\n                'title': 'S\u00e9rie',\n                'body': [\n                    'S\u00eanior',\n                    'Subordinado'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'Raz\u00e3o',\n                'body': [\n                    '=' + str(inputs.razoes[-1]),\n                    '=' + str(inputs.razoes[0])\n                ],\n                'format': ['prelude_percentage_0']\n            },\n            {\n                'title': 'PU Liquida\u00e7\u00e3o',\n                'body': [\n                    '=' + str(inputs.pu_emis),\n                    '=' + str(inputs.pu_emis)\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Quantidades',\n                'body': [\n                    '={i_next}/{i_prev}',\n                    '={i_next}/{i_prev}'\n                ],\n                'format': ['prelude_quantity']\n            },\n            {\n                'title': 'Montante',\n                'body': [\n                    '={Valor_Total}*{Raz\u00e3o}',\n                    '={Valor_Total}*{Raz\u00e3o}'\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Prazo',\n                'body': [\n                    '=' + str(sen_length),\n                    '=' + str(sub_length)\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': '% PMT',\n                'body': [\n                    '=' + str(inputs.pmt_proper)\n                ],\n                'format': ['prelude_percentage_0']\n            }\n        ],\n        [\n            {\n                'title': 'Per\u00edodo',\n                'body': [\n                    'Mensal',\n                    'Anual'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'S\u00eanior',\n                'body': [\n                    '=' + str(inputs.taxas_juros[len(inputs.taxas_juros) - 1]),\n                    '=({prev_body}+1)^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            },\n            {\n                'title': 'Subordinado',\n                'body': [\n                    '=' + str(taxas_juros_sub),\n                    '=({prev_body}+1)^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            },\n            {\n                'title': 'TIR',\n                'body': [\n                    '=IRR({fluxo_fin_start}:{fluxo_fin_end})',\n                    '=(1+{prev_body})^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_2',\n                    'prelude_percentage_2'\n                ]\n            },\n            {},\n            {\n                'title': 'FR 3 PMTS',\n                'body': [\n                    '=SUM({fluxo_3_sum_terms})*{P_PMT}-SUM({despesas_3_sum_terms})'\n                ],\n                'format': [\n                    'prelude_currency'\n                ]\n            },\n            {\n                'title': 'FR Previsto',\n                'body': [\n                    '=' + str(inputs.fr_previsto)\n                ],\n                'format': [\n                    'prelude_currency'\n                ]\n            }\n        ],\n        [\n            {\n                'title': 'Per\u00edodo',\n                'body': [\n                    'Mensal',\n                    'Anual'\n                ],\n                'format': ['prelude_text']\n            } if len(inputs.razoes) - 2 else {},\n            *[{\n                'title': 'Mezanino',\n                'body': [\n                    '=' + str(inputs.taxas_juros[i]),\n                    '=' + str(inputs.taxas_juros_anual[i])\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            } for i in range(len(inputs.razoes) - 2)]\n        ]\n    ]\n\n", "main.py": "import session\nimport flux\nimport parse_input\n\nimport time\nimport locale\n\nimport numpy as np\n\nimport spreadsheet as ss\n\nprint('Processing inputs.')\n\ninputs = parse_input.Input()\n\nflux = flux.Flux(inputs.saldo_files, inputs.starting_date)\nflux_total = flux.collapse()\n\ntaxa_juros_sub = .01\n\nprint('Inputs processed.\\n')\n\nprint('Calculating curve.')\n\nirr = None\nwhile not irr or abs(inputs.target_irr - irr) >= .005:\n    if irr:\n        taxa_juros_sub *= inputs.target_irr / irr\n\n    sess = session.Session(\n        inputs.c_period,\n        inputs.total,\n        inputs.razoes,\n        [taxa_juros_sub, *inputs.taxas_juros],\n        inputs.pmt_proper,\n        inputs.despesas,\n        flux_total\n    )\n    sess.run()\n\n    fluxo_financeiro = sess.collapse_financial_flux()\n    irr = ((1 + np.irr(fluxo_financeiro)) ** 12 - 1) * 100\n\n    print(irr)\n\ncurve = sess\n\nprint('Curve calculated.\\n')\n\nprint('--- CURVE ---')\nfor tranche in curve.tranche_list:\n    print('\\n', tranche.title)\n    for i, row in enumerate(tranche.row_list):\n        print(i + 1, row.saldo, row.juros, row.amort, row.pmt)\nprint('--- END ---\\n')\n\nprint('Rendering curve.')\nspreadsheet = ss.Spreadsheet(\n    inputs,\n    flux_total,\n    flux.months,\n    taxa_juros_sub,\n    (taxa_juros_sub + 1) ** 12 - 1,\n    curve.tranche_list,\n    len(curve.tranche_list[0].row_list),\n    len(curve.tranche_list[-1].row_list),\n    fluxo_financeiro\n)\n\nspreadsheet.render_prelude()\nspreadsheet.render_fluxo_creditos()\nspreadsheet.render_tranches()\nspreadsheet.render_fluxo_financeiro()\nspreadsheet.resize_columns()\nspreadsheet.render_file()\n\nprint('Curve rendered.')", "mezanine_tranche.py": "import tranche\nimport tranche_row\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef dependent_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    pmt = juros\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef transition_phase(self, _, F_i, tranche_list, tranche_i):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - tranche_list[tranche_i + 1].queue.pmt\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{pmt_next}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\ndef main_phase(self, _1, F_i, *_2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = juros + amort\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass MezanineTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period)\n\n        self.phase_list = [\n            carencia_phase, dependent_phase, transition_phase, main_phase, final_phase\n        ]\n", "flux.py": "import pandas as pd\nimport numpy as np\n\nimport time\nimport locale\n\nimport re\n\n# EXPECTED FORMAT for SALDO FILE:\n#  _______________________________\n# |__...__|___*MONTH___|__Total__|\n# |__...__|_____...____|___...___|\n# |__...__|___*VALUE___|___...___|\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR')\n\n\nclass Flux():\n    def __init__(self, saldo_files, starting_date):\n        self.starting_date = starting_date\n\n        self.flux_total = {}\n\n        for file in saldo_files:\n            df = pd.read_excel(file)\n            self.parse_frame(df)\n\n        self.collapsed_flux = []\n        self.months = []\n\n    def collapse(self):\n        for month, values in self.flux_total.items():\n            self.collapsed_flux.append(sum(values))\n            self.months.append(month)\n\n        return self.collapsed_flux\n\n    def parse_frame(self, df):\n        re_date = re.compile('^\\s*[A-Z][a-z]{2}/\\d{4}\\s*$')\n\n        height, width = df.shape\n\n        for col_i in range(width):\n            if re_date.match(df.iloc[0, col_i]):\n                raw_date = df.iloc[0, col_i]\n                parsed_date = time.strptime(raw_date, '%b/%Y')\n\n                parsed_year = parsed_date.tm_year\n                parsed_month = parsed_date.tm_mon\n                starting_year = self.starting_date.tm_year\n                starting_month = self.starting_date.tm_mon\n\n                if parsed_year > starting_year or parsed_year == starting_year and parsed_month >= starting_month:\n                    value = df.iloc[height - 1, col_i]\n                    if value > 0:\n                        formatted_date = time.strftime('%b-%y', parsed_date)\n\n                        if not formatted_date in self.flux_total:\n                            self.flux_total[formatted_date] = []\n\n                        self.flux_total[formatted_date].append(value)\n", "logo": "b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x01\\xc2\\x00\\x00\\x00\\xc8\\x08\\x03\\x00\\x00\\x00L*\\x11\\xa5\\x00\\x00\\x00\\x04gAMA\\x00\\x00\\xb1\\x8f\\x0b\\xfca\\x05\\x00\\x00\\x03\\x00PLTE\\x03TY?l\\x8fR\\x90\\xac;t\\x93B}\\x9c\\x02Q*\\x02c2E\\x81\\x9eG\\x80\\x9dX\\x96\\xb1T\\x91\\xac\\x02Y-\\x01U+\\\\\\x9a\\xb5M\\x89\\xa6\\x01\\x9dK\\t\\x8fF\\tx=\\x08\\x8dF\\x03U,\\x03g4\\x01V,9t\\x94\\\\\\x9a\\xb3\\x01Ln2l\\x8c\\x02\\x9eL\\x0b\\x82@\\x06\\x8fF\\x02d3\\x02i5-j\\x890m\\x8dBx\\x97\\x04\\x9dL\\x03\\x9dK\\x07\\x8fF\\x07o8\\x06o8(e\\x85\\x02Z.1o\\x8f?y\\x97N\\x8a\\xa7$e\\x85S\\x88\\xa48p\\x90(e\\x85\\x04Ru\\'d\\x85\\x01\\x9eL\\tz=\\x02^0\\x01V,\\x08\\xa4O\\x05\\x96I ]~\\x03{=\\x07u;\\x03j5x\\x9c\\xb3\\x04\\\\/@}\\x9b:x\\x96D\\x80\\x9dQ\\x91\\xad\\x04Su\\x03n7\\x04f4U\\x92\\xadU\\x8c\\xa9\\x1aWy\\x03\\x92G\\x06\\x8fE\\x03i5\\x02`0\\x1c[}\\x03\\x8cD\\t\\x84A\\x02]/\\x03Z.J\\x8a\\xa76q\\x907t\\x93Z\\x96\\xb2K\\x87\\xa3\\x02e3\\n\\x8cE\\x1cWw\\x11X{>{\\x99\\x06\\x90E\\x0bW|\\x16Wx\\x17Vx\\x12Vx\\x18Wy\\x03W|\\x14Vy!Ww\\x11Vw\\x0eVx\\x0cVz\\x11Wz\\rW{\\x14Wy\\x14Xz\\r\\x86B\\x1aWy\\x04W~\\x04V{\\x02~>\\x18Y{\\x08Tw\\x15X{\\x1aWw\\x0bUx\\x14Uv\\x02X\\x7f\\x11Wy\\x0bW{\\x1dYy\\x02W|\\x04W|\\x05V{\\x01W}\\x0eWz\\nW{\\x03W~\\x05X|\\x02W}\\x06V{\\x01X}\\x0eWz\\x03V{\\x01W}\\x02W|\\x02W|\\x02W|\\x0bZl\\x07W{\\nW{\\x02W|\\x03V|\\x03W|\\x0eWz\\x01W~\\x08^q\\tW{\\x01X}\\x02W|\\x01W}\\x0bWz\\x12^t\\x08Wz\\x11_r\\x0b]y\\x0bZt\\x0b\\\\{\\x00\\x00\\x00\\x04Vy\\x15\\x8bE\\x00Ty\\x01\\x8cE\\x00Np\\x05\\xa1N\\x00V+\\x11\\x95I\\x0cx=\\x12Uu\\x08\\x85B\\x06T+)f\\x85\\ng4\\x11X|\\x07w<\\x04Oq\\x10\\x81@\\x04v;\\x04\\x96I\\nc2\\'a\\x80]\\x9b\\xb5\\x07o8Q\\x8d\\xa8\\x01\\x9bL\\x06e3\\x10{>\\x0ey=\\x17Vw\\x0f\\x89DR\\x8a\\xa5\\x08|>\\x14UuU\\x91\\xab\\x06\\x8dF\\rRsX\\x96\\xb0@x\\x95\\tQr\\x0f\\x91G\\x0c\\x86B\\x01i5\\x00X|.d\\x84N\\x87\\xa3\\x08m7C|\\x99\\n~?\\x05k6\\x00X~\\x05\\\\/\\x13\\x83@\\x10TuAz\\x97\\td3\\x0br9\\x06^0,c\\x82-h\\x88\\x0ft:\\rX|\\x03W-G\\x7f\\x9c\\x08[.5n\\x8c+f\\x86K\\x83\\xa0\\x02X~\\x08W{\\tp8>u\\x94\\x0cb1\\x0ch4\\x08`0\\nX};s\\x91\\x19Wx\\x1bXy2l\\x8b0i\\x88\\x05Y~\\x1eZ{\\x05Z-8p\\x8e [{\\x04X|&_\\x7f*b\\x81#]}\\x07X~\\x06X|\\x03X}\\x00X}\\x02X|\\x02X}\\'\\xff\\x13[\\x00\\x00\\x00\\xa0tRNS~\\xe8\\xe7\\xf3\\x8b\\xc4\\x9a\\xe3\\xf5\\xf1\\xd3\\x9d\\x96\\xe9\\xd0\\xb6\\xf9\\xec\\xee\\xe0\\xf2\\xd1\\xbc\\xdd\\xb9\\xc5\\x97\\xec\\xce\\xcb,\\xe8\\xf4\\xb1\\xf3\\xe1\\xe2\\xa5\\xee\\xef\\xbfz\\xf0\\xe4o\\x87\\xa0\\xe1\\x9d\\xb2\\xc7\\xe1\\x8a\\xa8\\xfc\\xa8\\x92\\x9a\\xce\\xb6CG\\x9cn\\xd0\\x98\\xc4`\\xda\\xb0V\\xcd\\\\\\x86}n\\xe7t\\xbbW\\xec5\\xda\\\\t\\x1f:A\\xbc\\xedA4\\xc1\\xe8\\x8e\\xc3\\xa9\\xb9\\x98\\x7fTu\\xe0\\xf6\\xb8\\x84dO\\\\\\x8a\\x84!\\xd7\\x92\\xb3;\\xaao\\xa9\\xa0\\xf9H\\xca~gm\\xcb\\xef\\x99\\xfa\\xf2<\\xfa\\xd7]v\\xe4\\xdd\\xb0\\x17K4\\xd5B\\xa4\"\\xc0\\x1c\\'\\xecR\\xe9-\\x03\\xe7\\n\\x13\\x06\\x0f\\x00\\x94s\\x08\\xf5\\x00\\x00 \\x00IDATx\\xda\\xed\\x9d\\t\\x80\\x14\\xd5\\x9d\\xffw\\xf7\\x9f\\xbd\\x92\\xcdeL6&\\xc6\\xac\\x89\\x1a\\x13\\x8d\\xf7\\xad\\x98\\x88DT\\xf0B\\x04F\\x86s\\x80\\x19\\x10\\xe6\\xbe\\xef\\xfb\\xee\\xb9\\xaf\\x9e\\xbeX\\xfeFc\\x88\\xbdf\\x03\\xa8Q\\x94(hL\\x03B\\x1b\\xef\\x14\\x97U\\xa0\\x94\\x80%R@\\x9d\\xfb\\xaa\\xea\\xbd\\xea\\xaa\\xee\\xaa>\\x98\\x19h:\\xef\\x87\\xe00\\xf4\\xab\\xaa\\xa9O}\\x7f\\xbf\\xdf\\xfb\\xbd\\xa3\\xfe\\xc1\\x87\\xed,\\xb7\\x7f\\xc0\\xb7\\x00#\\xc4\\x86\\x11b\\xc3\\x081Bl\\x18!6\\x8c\\x10\\x1bF\\x88\\x11b\\xc3\\x08\\xb1a\\x84\\xd80\\xc2\\xd4\\xb1\\x8e\\xe5\\xd5\\xd3s\\xd3Wb\\x84g\\xad9r\\x8f\\x1d;\\xf6\\xf9\\xe1CW\\xb91\\xc2\\xb3\\xd3\\xdc\\xd3\\x01@\\x80\\xf0\\xf0\\xa1\\xa6\\x02\\x8c\\xf0\\xac\\xb4\\xc5\\x9f\\x1fSU\\x08,s)Fx\\x16Z\\x99\\nPEx\\xe8\\xf0\\xc6\\xfc~\\x8c\\xf0l3W\\xee\\xc9\\x10B`\\xcb:1\\xc2\\xb3\\xcc\\xe6\\x9fT\\x11~\\x0e\\x11n<\\xf4T\\xb6\\x07#<\\xab\\xdc\\xe8\\xe7*\\xc2cH\\x85\\x1b7\\xfe\\xe9O\\xe9\\x03\\x18\\xe1Y\\x94\\x8d\\xe6\\x9e<ir\\xa4\\n\\xc2\\xa7FWb\\x84g\\x8d\\x95\\x9c\\xb4@\\xf8\\xa7\\xa76\\xe7\\xb90\\xc2\\xb3\\xc3\\x9aO\\x1e?\\x19\\xe9H\\x9fz\\xfb\\xed\\xb7\\';0\\xc2\\xb3\\xc1F\\xd2\\x8e\\x1f\\xd7dhV!@\\xf8vM%Fx\\x16\\xf4\\'\\xa6\\x1e\\xb7U\\xe1\\xdb\\x9b7G\\xa9\\xb7a\\x84Ib7\\x1d\\xd7\\x11F\\xa8p\\xf3\\xe6\\xcd\\xafw5`\\x84\\xc9m+\\x8e\\xaf\\x0f\\xa9\\xf0\\xf30\\x15nV\\x18n^\\x8a\\x11&\\xb39\\xd6\\xaf?\\x1e\\x86\\xf00\\xe8\\xd9\\xa3X\\x08\\x08\\xbe\\xbe\\xf9\\xf5\\xf6~\\x8c0\\x89{\\x84\\x80 \\xcaf,U\\xf8:\\xb0g\\xda:1\\xc2$5g\\xfe\\t\\x05ax,\\xdc\\xb81\\xa4B\\x85\\xe13\\xcf<\\x93\\xed\\xc4\\x08\\x933\\x95Y\\x1fBx2L\\x85\\x7f2\\xa8\\x10\\xd8w;0\\xc2dLe\\xd6\\x9f\\x00\\x08\\xd7Gt*\\xd4X\\xf8\\x14\\x8a\\x85*\\xc2\\xc7\\x1f\\x9f\\xec\\xc2\\x08\\x93\\xce\\xcaN\\x9c8av\\xa4\\xf6*|\\xfc\\xf1g*1\\xc2d\\xb3\\x81\\xe9\\x08\\xe1\\xf1(*\\xdc\\x8c\\x10>\\xfe]\\x8c0\\xc9\\xac#\\xf7\\x03]\\x85\\'\\xa3t\\xedu\\x84m\\x18ar\\x99k\\xce\\x07\\x1f\\x98\\x1c\\xa9e\\x8d\\xd4\\xa8\\xc2.\\x8c0\\xb9\\xba\\x13\\x0b?@\\x08\\xd7G/\\xb0\\xe9\\x08{0\\xc2\\xe4\\xeaNl\\xfd L\\x85V]{\\x93\\n\\x1b0\\xc2d\\xb2\\x9fn\\xddj\\xa1\\xc2c\\xe1]{\\xa3\\n\\xf3p\\xbf0\\x99\\xec\\xf2}[\\xadT\\xf8\\xb9\\xc5`\\x13B\\xf8]\\x17F\\x98D\\xb6\\xf2w\\xd6\\x08\\x8f\\xd9\\xc7\\xc2B\\x8b9\\x18\\x18\\xe1\\x99\\xeb\\xd2\\xef\\xdb\\xa7\"<\\xa1;\\xd2\\xb02\\xf7\\xc6\\x88X\\x98gQ\"\\xc5\\x08\\xcf\\x1c\\xc1\\x9f\\xec\\x0bS\\xe1q\\xabt\\xc6\\xa8\\xc2\\x16\\xcb\\x03a\\x84g\\xc8\\n~\\xb2o\\xdf\\xef\\x12\\x8a\\x85\\x9b\\x9b}\\x18a\\x12\\x99\\x03\\x10\\xb4U\\xa1U,\\xdc<\\xda\\xed\\xc3\\x08\\x93\\xc8F~\\xf8\\xe1\\x87\\xd6*\\xd4\\xab3\\x87\\xcd*\\xec\\x1a\\xf1a\\x84\\xc9D\\xf0\\xca\\xcf>\\xdcg\\xebH-b\\xe1\\xeb\\x16\\xe3\\x84\\x18\\xe1\\x19&\\x18R\\xe1\\x89\\xa8\\x9d\\nM\\x85WEY\\x1d\\x83\\x11\\x9e\\x11\\x82\\x9f}\\x18E\\x85\\x915\\xd2\\x96h\\x87\\xc3\\x08\\xcf@\\x1c\\xfc\\xec3\\x0b\\x15F\\x96\\xb9\\xd1xa\\xcd\\x12\\x1fF\\x98T\\xb9\\xe8\\x0f\\x8f|\\x96\\x80\\n\\x9fz{Y\\x8cE\\xf7\\x18\\xe1\\x19!hTat\\x84o\\xa7\\xc7Z\\xad\\x8d\\x11\\x9e^{\\xf4\\x87G \\xc2(*\\x0ce\\xa4\\x1b\\x9f\\xba\\xca\\xe5\\xc3\\x08\\x93\\xc9\\xca\\xfek\\xef\\x11\\x95\\xe1\\x87\\xfb\\x90\\n\\xb7\\x9e\\x88\\xa2\\xc2\\xa7\\xe2\\xd8\\xf5\\x02#<\\xbd\\x04\\x15\\x80G,\\x1d\\xa9\\xd5\\x9a\\x8aQ\\xbc]Brj\\xf0\\x88eFj1\\x83\\xadz\\xc0\\x87\\x11&\\x1f\\xc1\\xbdGb\\xa63hY\\xcc\\xc2\\xf8\\xf6\\xf0\\xc2\\x08O\\x9b=\\xfc_{\\x15\\x11\\xc2Xh\\xe7HO\"\\x15n\\xac\\x88\\xf3\\xb8\\x18\\xe1i#xd\\xef\\xde\\xe8*<n\\xccH\\xe7-\\xf1a\\x84\\xc9e\\xbf\\xd8\\xfb\\xc5^\\xa8BS\\xa7b\\xab\\x95#=v8\\xbe0\\x88\\x11\\x9eF\\xfb\\xe9\\x17\\n\\xc1\\xbd\\x88`\\xf4Xx\\xecp\\x89\\xd7\\x87\\x11&\\x1d\\xc1/\\xbe\\x88\\xe5Hu\\x84\\x99E\\x89\\x1c\\x1b#<\\r\\xe6\\xbc\\x02\\x124\"T\\x1c\\xe9VK\\x84M\\xdd>\\x8c0\\xb9\\xccu\\xc5\\xa7_\\xe8*<\\x12\\xa1Bsu\\xe6\\xe4\\xe7\\xf1ma\\x89\\x11\\x9eF\\xeb\\xf8\\xce\\xa7\\x9f\\x1aUhS\\x9d\\x81\\x08?\\xcfp\\xfa0\\xc2\\xe4\\xb2\\x81\\x19\\x9f~\\x1aR\\xe1\\xde\\xbd\\xf6*T:\\x15\\xd3;\\x13>\\x01F8\\xc1\\xf6\\xa8BPW\\xe1^\\x0bGj\\\\_8\\xa7\\xd7\\x87\\x11&[\\x87\\xfe\\xff)\\x00\\x95_\\xb6\\xb1\\xd0\\x80p\\xb9\\xd3\\x87\\x11&[g\\xe2\\xc0\\x81OmT\\xb8/\\xc2\\x91N/;\\xa5s`\\x84\\x13h\\x9e\\xdb\\x0f@\\x84\\x9f\\xea\\xb1\\x101\\xdc\\x17Q#M4\\x13\\xc5\\x08\\'\\xde\\x1e\\xf9\\xce\\x01\\x88\\xf0\\x0b=#\\xddk\\xe3HO\\xac\\xbf\\xfcTO\\x83\\x11N\\x98=4\\xe3\\xc0\\x81H\\x15\\x86g\\xa4[\\x15\\x82\\x1f\\x9c\\x98Z\\xe0\\xc3\\x08\\x93.\\x91\\xf9\\xd9k\\x07\"U\\x18\\xaa\\x91\\x1a\\xe6\\xce|\\xb0\\xfe&\\xaf\\x0f#L2s~\\xe9\\x9d\\xd7^;\\xf0\\x9ae,\\x0cG\\xb8\\xfe\\xca%c9\\x15F81a\\xf0B@\\xd0\\xa8\\xc2OC*\\x8c\\xe8\\xda_\\xdd\\xef\\xc3\\x08\\x93\\xaf?\\xff\\xce;\\xd6*\\x0c\\xcd\\x9dA*\\xfc\\xc9\\x8a1\\x9e\\x0c#\\x9c\\x00\\xfb\\xc5\\xcfT\\x82V\\xb10\"#\\xbdz\\xc0\\x87\\x11&\\x9byo\\x7f\\xe7M\\x880Z,Td\\xb8\\xf5\\'\\x97;}\\x18a\\xd2\\xf5%~\\xf9\\xe6\\x9b\\n\\xc2w4\\x15\\x9a\\x08\\x86\\x0f\\xf9^=2\\x0e\\'\\xc4\\x08\\xc7\\xbd/\\xa1\\x13\\xd4Th\\xf2\\xa4\\xa6\\x19l\\xe3!A\\x8cp\\xfc\\x9d\\xe8\\x9b\\xbb\\xdf\\xd4\\x18\\xbefP!\\xaar\\x1bU\\xf8\\xbb\\xb1GA\\x8cp\\x022\\xd1_\\xeeV\\x08F\\xc6\\xc2/\\xc2c\\xe1gW\\xae\\x1c\\xaf\\x93b\\x84\\xe3\\x99\\x89\\xfe\\xdbn\\x15\\xa1Q\\x85\\x07\\xcc*\\x84\"\\xfc\\xec\\xa6\\x0e\\x1fF\\x98\\x84\\xddy\\x05\\xa0\\ta\\xa4\\nU\\xfb\\xf0\\xbcG\\xc7\\xf1\\xbc\\x18\\xe1\\xb8\\xe51\\xff\\xba{\\xb7A\\x84&\\x15\\x9a\\xc7\\x0b\\x7fx\\xb9\\xe5\\xe6\\x07\\x9ei\\xd7_?\\t#<c\\xe6\\xbe}\\xf7G\\xbbw\\xeb\\x10m\\xfb\\x85\\xc0n\\xb2\\xae\\xa7]p\\xe9\\x9e\\xa3G\\xf7L\\xc3\\x08\\xcfX\\x1e\\xf3\\xd1G\\x1f\\xd9\\xab\\xf0\\x8b\\x90\\n\\xaf\\xb6~\\x17\\xa1\\xe7\\xde\\x07\\xf7\\x1c}\\xeb\\xe8\\x9e\\x07;0\\xc23\\xd2\\x95\\xf8\\xd2G\\nA3C+\\x15\\x1e9\\xefa\\xeb#\\xcc\\xba\\xf4\\xad=o\\x1d}k\\xcf\\x9e=\\xff\\x81\\x11\\x9e)\\t\"\\x15Zf\\xa4\\x90\\xe0\\x8c\\x87\\xadw\\x00r_w\\xf0}\\x05\\xe1Q\\x80\\xf0\\xe8$\\x8c\\xf0\\xccH\\x10\\xa9\\xd0\\x94\\x91\\xbefB8\\xe3r\\x9b\\x9d\\x0f\\x1e\\x98\\xf2\\xfe\\xfb\\x1aB \\xc3\\xa3\\xdf\\xf6`\\x84\\xa7Y\\x82_\\xdb\\xb6\\xed\\xa3p\\x15\\xbe\\x13V\\x9d\\x01\\x08g\\xfc\\xd4f`~\\xd6\\xad\\x07\\x0fB\\x84\\x8a#=zt\\x1aFxZ\\x13\\xd1;\\xb6m\\x83\\x08\\xb5Ph\\xd3/\\x9c\\xf1\\x0b\\x1b\\x809\\xff\\xb2\\xee\\xe3\\x83\\nC\\x15\\xe1Q\\x05a\\xa2\\x19\\rF8\\x16\\xbb\\xebk\\xdb^\\x06\\x04\\xb7}d\\x84\\x18\\x99\\x91\\xda\\x02t\\xdf\\xfb\\xe0\\xc1\\x83\\x07u\\x15\\xaa\\xb1\\xf0h\\xa2\\x19\\rF8\\x86r\\xcc\\x1d/\\xbf\\xbc-\\xb6\\n\\xcf{\\xd8&\\x06\\xba\\xa6M9\\xf8\\xf1\\xc7\\x06\\x84\\x9a#=zt\\x16FxZ\\xcc9\\xf3\\xb2\\x97\\x01\\xc2\\x97\\xf5PhP\\xa1!#\\xfd\\xce\\xa36#J\\x9e\\x07~\\xb0\\xee\\xe3\\x8f5\\x84\\x07\\r\\xe9\\xcc\\xd1]\\xbb.ub\\x84\\xa7\\xc1\\x1e\\xfa\\xda\\xcb\\x8am\\xd3e\\xb8\\xdb\\xa2S\\xf1\\xb3+\\x1e\\xf2\\xd9\\x02|W%h@\\xf8\\x96\\x16\\x0b\\x01\\xc4\\x070\\xc2\\xd3\\xe0C\\x9f{NC\\x18\\xa6\\xc27\\r\\xb1p\\xc6O\\x1f\\xb1\\x07\\xf8\\xc7u\\xeb\\xde\\xd5Uh\\xecT(2\\xfc\\x96\\x17#\\x9c\\xe84\\xe6\\xb2\\xe7 \\xc2\\x97\\xc3ba\\xa8D\\xfa\\x9d\\x87\\xed8\\xb8\\xee\\xfc\\xc1\\x1f\\xff\\xf8.\\xb0u\\xd6*\\xdc\\xb5k\\xd7u\\x18\\xe1\\xc4\\xfa\\xd0_\\xbd\\xf2\\xdcs\\x90a(\\x9d\\xf9\\xc8\\x98\\xce\\xfc\\xecv\\xdb\\xe1$\\xf7\\xb4)O\\x7f\\x02\\x10\\xae{7\\\\\\x85\\xc0\\x10\\xc2\\x07/\\xc0\\x08\\'\\xd2\\x87\\xbe\\xf2\\xca+\\x88\\xa0\\xeaHM}\\n\\x05\\xe1/\\x7fa\\xe7A}9\\xf7N\\xf9\\xe4\\xe9O>QU\\xb8.<\\x9d\\t\\xa9p\\xd7\\xf5\\x18\\xe1D\\x99k\\xe6?\\xbd\\x02\\x11>g&\\x08U\\xa8\\x08\\xd06\\xa1\\x9c\\xf5/\\xe7>\\xfd4D\\x18\\xa9B\\x88p\\x97j\\x930\\xc2\\t\\n\\x82_~\\xe5\\x95WL*T\\x1d\\xe96M\\x84\\x00b\\x14\\x01\\xba\\x1e\\xbbu\\xe7\\xd3\\x7f\\xf9\\xe4\\x93\\xa7#\\x11F\\xaap\\xed\\xb7]\\x18\\xe1\\xc4\\x04\\xc1-\\xe1\\x08\\x8d\\x19\\xe9\\xbf\\xdaG@_\\xce\\xb4);w\\xee\\xfc\\x0b@\\xa8\\xa9p\\x9d\\xd1\\x91\\xbeo\\xee\\x17\\x02{b\\xd74\\x8cp\\x02\\x82\\xe0\\x16`!\\x84a\\xe9\\xcc\\xbf]\\xf8\\xb0\\xed\\xe6\\x93\\xceY\\x17_\\xb2]%\\xa8#\\xd4U\\xf8\\xb1A\\x85{t\\x15>\\xb1\\xf6\\xc1\\xfe3\\x80\\xd0;\\xd2\\xd9RQQ\\xd1\\xd2R\\xd99\\x12\\xdfV\\x9a>\\xcfHw\\x95\\xda\\xa4j\\xc8\\x11\\x7fu\\xb7\\xbf\\xa1\\xb9\\xaa\\xa5Em\\x14\\xc7\\xcf\\xd9\\xe1\\xe8\\xacT?^\\xd1\\xd2<\\xd40\\xd2\\x7fj\\xf3o\\x1f\\xf9\\xf9\\xbf+\\x00\\xb7\\x98\\t\\xea\\x08\\xa38P_\\xff\\xb4[\\xb6\\x03\\xdbiR\\xa1},\\xd4\\x10\\xeeZ\\xfb\\x95SG\\xb8\\xa2\\xa8E\\xb3\\xaaDF\\xaeF\\x8a\\xe6\\xb4\\xca2\\xa9\\xfc\\'\\xc9\\xb2<\\xbc \\xc3\\x11\\xabI\\xef\\x8a\\xfc\\xb6F\\xf0Y\\xd8d\\xb0:\\xa3;v\\x00p\\x0f\\x95\\x94\\xd7+MHRV\\x1b\\xcd/\\x8b\\xd2\\xa8\\x7feI\\xee\\xa0(\\xcb\\x92\\xa4~\\\\\\x92da\\xb0kjO\\xcb\\xd0@b \\xdd3\\xbf\\xbaeKH\\x84!G\\xaa2\\xfc\\xe5\\x97\\x1e\\xb2=\\x9cg\\xd2\\xc5\\x97<\\xbb}\\xbf\\x86\\xd0\\xa4\\xc2u\\xd12\\xd2\\'\\xd6\\xae\\xdd5\\xeb\\x94\\x11\\xd6\\x10~\\xf5\\x17Q\\x1a\\x7f\\x8d\\xa03\\xbf\\x94\\xa3\\x01\\x07\\x05\\x85j\\x12\\xc7\\xd1\\x0b\\x9a\\xa3\\x11i(\\xc9\\x04M\\xf4\\x06\\xa0\\tOs\\xb9K\\xa3\\xcbw`\\xfe2\\x96fE\\xbd\\x89$1\\xa0Q\\x8b\\x8d\\x80\\x1b\\x8a\\x07i\\x822]\\x96,\\xb24\\rNT\\xb7 \\x81\\x02\\x88w\\xe6\\x7fn\\xd0\\x00n\\x89T\\xe1ew<j\\xff\\xa8_p\\xef-\\xfb\\xf7\\xef\\x7f\\xf6\\xd9\\xfd\\x91*\\x8c\\xecT\\xbce\\x8c\\x85k\\xd7>\\xf1\\xcf\\xceSE8\\xca\\x0b\\x12\\xf8%\\xb0\\xc3\\xf1\\xfe\\x94\\x05YA\\x89gYV\\xbbI\\xca\\xfd\\x92X\\x96\\xe7\\x85`\\x93\\xed\\xf2\\xd5\\xde\\x12Rfx\\xad\\x89\\xd6Lm\\xc3\\x06\\xdb\\x8a\\xec/\\xdc\\x9b]#\\x04yJ2\\x10\\x11\\xd4F\\xadE\\x16w\\xd1]\\xdb(K\\x04C\\xf2\\xb2\\xd1D\\x96\\n\\x82\\xc7\\x8b\\xaeq\\'\\x02p\\xc3\\x86-\\x1b\\x0c\\x08u\\x86\\x97\\xdd~\\x97\\xfdM\\xea\\xb8\\xf3\\xd6\\xf7\\xde{OAhT!\\xeaT\\xbc\\xbb.\\xb2koR\\xe1\\x13k\\x1f8e\\x84\\x9c\\xa8=\\xb6\\x83q\",\\xca\\xf4\\x07eQ6\\xd0\\xd0n\\x96\\x14\\xa4\\x0f\\xe5Y\\x0bqh\\xde!R\\x14\\x8d\\xb7V\\x05/\\x8a$w\\xa8\\xdd.\\xbe9\\xaa\\x05 \\xc0\\x80h:\\x8bz\\x1e\\xeePV\\xc4\\xb6I\\xbdS\\x15\\xb5\\x06\\xd0\\x07%\\x13G^\\x88\\xfb\\xf9\\xbcM\\x01\\xa8\\x11\\x0cs\\xa4\\x97\\xddq\\x97\\xfds\\xe0\\x9cu\\xf37\\x9f}OC\\xb8\\xdf\\xa4B\\xd4\\xa9X\\xf7\\xee\\xc7Q\\x1d\\xe9\\x13k\\xbf\\xe5>u\\x84R\"\\x08\\xf3$N\\xe0\\xc2\\xee\\x91z\\xcf\\x02\\xbc\\xc0\\xb0\\x8b\\xac.\\xa3h5h\"\\x843W\\x8ca\\x18\\xbe\\xcbz\\xbdH\\xd9`\\x90c\\xcd\\xc8\\xe1\\x17,\\xc3pma\\xeb\\xbc:rY\\xc1\\xe8BU\\x9dK\\x89#|\\xe4\\xab*\\xc0\\r\\x1b\\xb6\\x98U\\x18\\x95\\x1f(\\xc2\\xdc\\xf2\\xb7\\xf7\\xfe\\xa6\\x13\\xdcn\\xe9HC\\x19\\xe9\\xfb\\xd6\\x08\\xd7^76\\x15JR|\\x08\\xf3\\x04Y\\x10#\\xf0!\\x13\\xc8\\xc9\\x91G)bA\\x13\\xc9\\xf0I\\xc9@\\x84d\\xe56+\\x86e\\x99\\x84\\xeaw\\r\\xedB\\xa7\\x01\\x8dZ\\xcd\\x0c\\xdbE)\\x10v9\\x92~\\x129~\\x8437\\xa8\\xb6e\\x8bQ\\x85_\\xbe#\\x8a\\xffT\\x1c\\xe8%\\x7fS\\xec\\xbd\\xf7\\xc2\\x1ci\\x98\\n#\\xc6\\x0b\\xf7\\x98b\\xe1\\xda\\xb5k/8u\\x84\\xea\\x8f\\x1a\\x17\\xc2\"\\x89D\\x8f\\xb6\\xa8\\xdf_\\x905\\x88\\xe8\\x91\\x0f\\x16\\x86\\x07\\xb7\\xb2\\xba\\xa0\\x92\\x88(Md\\xd1\\xd8\\x04=\\t\\xc1\\xa6\\xc83\\x0f\\x8c\\x06y\\xa4[1\\x10\\xe2\\x88\\x0e\\x00\\x1a\\x19\\x93\\x9a\\xee\\x00Lw\\xe0\\x1f\\xa6\\x07,\\x90\\x80\\n\\x7f\\xb5\\x012\\xd4c\\xe1\\x97\\x7f\\xfeh\\x944\\xcd\\xfb\\xd8\\xcd\\xdf\\xfc\\xcd\\xff\\xfe\\xaf\\x05\\xc2\\xed\\xd6\\xfdBc,\\xdc\\x13\\xa6\\xc2\\xb5\\xd7\\x8fA\\x85\\xca\\x8f>\\x1a\\xc7OYP\\xaag\\x95\\x04\\xcd\\x92$\\xc9\\x88\\xac@\\x92\\x02M\\xc0\\xbcQ\\xe2\\xe8\\xb0\\x97\\xd6\\xf4\\x8f\\xd2\\xda\\x9d\\x95E\\x82\\xe0I2\\xc8\\x90\\x02h\"S\\x04\\x05\\xa5\\xc9\\xd3%\\x11\\xd5\\xa9\\xc9\\x04\\x01SJ\\x99\\xa58R\\x08\\x88\\xb0\\x11-\\xa2|\\xd6\\xf8\\xacd1\\xf0\\xaa\\x04\\xe5cd}k\\x1b\\xb0\\xd6\\xe1\\xc1z2(\\x92L\\x90c\\xea\\xe3Dx\\x87\\x81\\xe0\\x96-\\xff\\xfe\\xab\\x99\\x0fE\\xc9\\x13\\xbd\\x93n\\xbe\\xf67\\xbf\\xf9\\x9f\\xff1 \\xdc\\x1f\\x91\\x91>\\x1dW\\xbfPC\\xf8m\\xe7\\x18T\\x08<ZM\\xec\\x9f\\xd23\\x95F\\xe1I\\xe4\\x18:\\xb7\\xb6\\xa2\\xb9\\xb9\\xb3\\xb9\"?\\x8d\\xe1HQ\\xf5\\x8f\"\\xcbg\\x9aS\\x8d\\x12B\\x12\\xa0\\x828\\x8e\\x9b\\xde\\x03\\x9a\\x0c5\\xb7\\x94\\xccc8\\xcd\\xbbJ\"\\xcb\\xfa\\xc3w\\x94+\\xe2\\x02\\nt\\x10`YI\\xa0\\x9aJ\\x8a\\x86\\x86:\\x87ZJ\\xa6\\xf3\\xa0\\x91\\xea\\xf6eA\\xf2\\x87\\xf2\\xdf\\xfeRtY\\x02]S\\xd2\\xec\\xe8\\xf5\\xba\\\\\\x1e\\x8f\\xd7\\xdd?\\xe0h\\xe8l^\\x9a]\\xbb(+\\xce\\x8c\\xf4\\xa1\\r\\xba\\'\\xfd\\xcf;\\xeez$Z\\xdf\\xf11\\xc0\\xef\\xc5\\x17_4#\\xb4U!\\xb0\\x88t&B\\x85\\x97\\xfa\\xc6\\x84P\\x8cC\\x85+)\\xbfv\\xaf\\x04\\x89\\xa3\\xb2:\\xf5\\xd4\\xbe\\x7fi\\x1a#\\xa8~O\\n\\x12\\x9cIS\\x0e\\x8a\\xe0\\xb5\\x13\\x80>]u\\xb3~\\x0ewe\\x13\\xc7j\\xd1*H\\xd3\\x93\\xcd\\xbd\\x04w\\x1a\\xa3zF\\x01\\xb4\\xe2\\xca\\x97\\xe8\\x8e\\xcc\\xdb\\x9c\\x0bS\\x1c\\x90\\xfe\\x12M\\xfa\\xf7\\x878Zs\\xb4\"\\x9b?\\xc6\\xc5\\xb4Z0\\xfc*\\x90_\\xb4^n\\xce\\xdd\\x17_\\xbb\\xe9\\x85\\x17^\\x00\\x08_\\x8cT\\xa1e:\\xb3.\\xdaH\\x05D8il\\x08\\xe3Hg<\\xd50@\\xb1\\x94\\\\j\\xde\\xd6\\xbdw\\x81\\xc0S\\x8a\\x0eI\\x9e\\xac3f\\x1a\\x0b\\xd5&@j\\x94@\\xcf7\\x81r\\x97\\xf0\\xe0\\x9b\\x8a\\xfe\\x19\\x811\\xf7(+HQ\\x95\\x1a+\\xd1\\xd4*S#\\xefbNm\\x04\\x92YV\\xd0\\xb7p\\xb9\\xc9/\\xc0X\\xd9\\xe4\\xf5\\x8d\\xd1\\x1e\\x9ay\\xc7\\xcc\\xdb\\xa2i\\xd63\\xf7\\xbe\\xfb\\xbf\\xb9\\xe9\\x85M\\x10\\xa1\\x9d\\nw\\xee\\xdc\\xfe\\x97\\xbf\\xc4;R\\xa1\"\\xfc\\xe7\\xb8F\\x9c\\xa2\\xf4\\x0b\\xe3@XF\\xc0\\x14\\x84%\\xa9\\xe6\\xf0\\xb8\\xb0@\\xedT+i\\n=\\xdf\\x806S\\xd42E\\x96Y\\x1d\\xf1J\\x9b\\x12\\x81Q\\xbd\\xa5(\\xb2sL\\x91\\xb0\\t\\xa6J\\x82\\x14\\xc8\\x0eo\\xb4\\x184\\xd2\\xfc2\\xbb\\x00\\x85\\x8e\\x85(B\\x8a\\x95\\x13\\\\\\xfc\\xcey\\xec\\xe6[6m\\xda\\xf1\\xc2\\x8eM\\xd6\\x08C\\xb1p{Du\\xe6c\\xcb\\x19l\\x9a\\x0c\\xd7~\\xeb?&\\x9dzu\\x86\\x83YEl\\x84%\\x0c\\xf4b\\xac\\xb0<\\xb2>9\\xca\\xc0\\xb4\\x91Y\\x16\\xf2AK\\x95&\\xca-g\\x85\\xc2\\xc8!\\xb5j\\x94\\x850\\x94Q\\xb9\\x9d0G\\x06\\x8d\\x8a#E\\xb0\\x80\\x11\\xb4\\x9c\\x96\\xd1\\xe5\\xde\\x1eP\\xa9\\x06X\\xbaa\\x02\\xf1\\xb9g\\xdfs\\xff\\xf7\\x7f\\xff\\xfb\\x1d\\xc0^\\xd8\\xb1c\\x93\\xa5#\\xb5\\xad\\xceX\\xa53z,|\\xf0\\xfa\\x07\\xe2\\xae\\x1e\\xd9;\\xd28\\x10z\\xa7KZQM\\xe4\\x9a,\\x02E\\x11\\xad\\xc9\\x99\\r\\x84\\xb2\\x13\\xe7\\x1cTT\\x132-\\xf6\\xa1n\\xc8\\xea\\xeb[\\xd4\\xa7\\xfcN7&4\\x8bQ\\'\\xc2\\xbaQ\\xa9\\x96\\xd0\\x80rZ\\x06B\\x88\\xfa\\x0f\\xfe\\x82\\t\\xc3w\\x9f\\x82\\xef\\xaf\\x7fU\\x10n\\xda\\xb1#\\xa4\\xc2\\xc8X\\x08\\x18F\\xaf\\x91\\x1a\\xc6\\x0b\\xf7\\x1cU\\xf8%2\\'\\x7fL\\x05\\xb6\\x06z5\\x0bk\\xc7V\\x1b\\x89\\xb9\\x96iAUX\\xcd\\xad\\xd2\\xbb\\xbd5\\xaba)U\\x98\\x1f\\xf7Ez\\xba\\x04\\xc80\\xb8\\xd8\\xea\\xdf\\xf3!0\\x96O7 T\\x1d/\\xd10!\\xce\\x13\\xa8\\xef\\xb7\\xbf\\xfd\\xabjH\\x85\\x9bb\\xc7\\xc2\\x9dQc\\xa1\\x1a\\n\\xf7$\\xc8o\\xac\\xe9L\\x0b\\x8cP<9l)\\xfbUA^R\\xbb\\x02b\\x9f\\xc1%JZy\\x84t\\xc4}\\x91#\\x8d\\x04d\\xc8X\\x12\\xe9\\x0c\"i\\x0f\\xc2\\x1f\\xbf\\x90\\x95`\\xa2\\xdc2\\xbe\\xf4\\xbcs\\xef\\xbe\\xf9\\xfcs\\xde\\x00\\x16\\'B-\\x16n\\x8fY\\x9dy\\x1f\\xe0{\\xeb[_y`\\\\V\\xf9\\xc6\\xefH\\x0b\\xd1(\\x11\\xbf\\xd0\\xba\\xdf\\xef\\x17\\xb4[+\\x8e\"\\xc4\\x15\\x82V\\xe8\\xe2\\x85\\xdc\\xf8G\\xec\\x86\\x18B\\xbb$\\xb1\\xc9r\\\\\\xc7=\\x8f\\xd4\\xfa)\"\\x0b\\x11/\\x97@\\x96\\xaaz\\xd7\\xd1\\xde\\xf1\\xa2\\xe7\\x9a{\\xf7=\\xf7_\\xf4\\xd2Ko\\xbc\\x04~k\\x08\\x7f\\xaf#\\xdc\\xa1\\xc5\\xc2\\x17-U\\xb8\\xffYc\\xbf\\xf0i\\xd4\\xa90;\\xd2\\xf7\\xbf}\\xdd$\\xd7\\xa9\\\\\\x97\\x1dB)\\x0e\\x84\\xce\\\\\\x18\\xeb(\\xca\\xfa=Q\\xdey\\x0c\\xab\\x15\\xba\\x08\\x94g,\\x84\\x08i~q\\xfc\\x17\\xb9\\x9c\\xe5\\x03\\x8aC\\x96\\xe5\\x12\\xeb\\x0f\\xcc\\x11(\\xedR8\\xe8\\xd0\\x97\\xf0\\xb0_(3\\x93\\xfb\\xc7\\x0c\\xcf\\xd9\\xa1\\xd2{\\xf5\\xff\\xbf\\xfa\\xdf\\xff\\xad\\xf0{)\\xaa\\n\\xe3\\xed\\x17\\x1a\\xd3\\x99\\x07/\\xbdw\\xd6\\xa9\\xee\\xe6e\\x8bP\\x8a\\xdd\\xa9\\xf0\\xa6A\\xafH\\x07m\"N\\x1f\\xecw\\x8b\\x1cz\\t\\xca\\x02(\\'JH \\xdb\\xef\\xd1\\x1e\\x84\\x80 UY\\x7f`\\x15\\xcbkY4J\\x8c\\xfbk8X;\\xa7\\xe8ec\\xd8g\\xc9\\xe9\\x9e\\xfb\\xd8}7\\x9e\\x7f\\xce\\xab\\xaa\\x01\\x84/\\xa9f\\x8b\\xf0\\xc5\\xe8\\x08\\xc3\\xc6\\x0ba\\xa7b\\xcaW\\x1e\\xc8\\x19\\xc3\\x036\\x96tf\\xa0\\x0e\\xd6\\xb2\\xc9:\\x1bo\\xd5\\xa3U\\xd2$\\x91,B\\x19NPK\\x1e\\x05&\\x81\\x972d)\\xe3\\xc9\\xc08\\xce\\xe6u8\\x95\\xb0b\\'\\x91\\xa8\\xa3\\xd2\\x0e\\n\\x7f\\xea\\xb5q~\\x96N\\x1f\\xf2$\\x1e\\xf4rf\\xdf}\\xcf\\x8d\\xe7_\\xf4\\x8dW\\xff\\x0cL#\\x18\\x05\\xe1\\x8e\\xd8\\xfdB\\xb3\\na(|\\xf0\\xd6i\\xb3\\\\c\\xf3\\x11Qba\\xccb\\xbeC\\x8b7\\xc0Y\\x8d\\xdatb*8R\\x83L\\xc1^\\xbc\\xbb\\x06\\xe6\\x1d$\\x15\\x7f6\\xe3l\\xa2iB1\\x81\\xb0\\xe9\"t\\xa2A\\x0cn\\x11*:p\\xca`\\x93ZacY\\x91\\x9e\\xba4^w\\xea\\xca\\x01\\xba\\xbb\\xe7\\xc6k.\\xfa\\xd1\\x1f\\xfe\\xfc\\xe4\\x93\\x7f\\x86fF\\xf8\\xc6K\\x16*\\x8c\\x19\\x0b!B]\\x85\\x7f<\\xf7\\xd2\\xeb&\\x8d\\xc3>^Q2R6-\\x06\\xc2nN\\x1b\\xb5\\x13\\x89j\\x1b?^\\xe5\\xd7\\xeel\\x80\\xcb\\x83\\x0e\\xae\\x1e\\xf6B\\xe8\\x9a\\xf8/\\xde\\x99\\xdf\\xa4Y\\xeeT\\x1b\\xb5;\\xfc\\xda\\xb8\\x88\\xc8\\xe9\\xa9o!\\xcb\\x88\\xfaX!\\'\\x085%\\xdd\\xb6\\xc1\\xc6\\xe9q\\xe7\\xcc\\x9d}\\xf7}\\xf7|\\xef\\xeb\\xd7\\xfc\\xf8G\\xcf\\xff\\xe1\\xc9?h\\x06\\x10>i@\\x18\\xdd\\x91\\xee\\x88\\x12\\x0b#\\xfb\\x85\\xe7\\xfe\\xe0\\xba1y\\xcf\\xf8T\\x18s\\xeeL\\xa7\\xa0\\x8d\\x8b\\x8bD\\xbe\\xcd\\'V\\xf8\\xe1=dk\\x91\\xef\\xd5\\x12E\\x916\\xe4\\x96\\x1d=\\xc5\\x06\\xcbo\\x87\\xb6\\xcap\\x8b\\x91\\xd9\\xf5:\\x14\\x84jf\\xd5\\x858\\xf5\\xa6\\xb1\\xa8\\x9a\\x0e\\x1c\\n\\x98% \\x92\\xe5\\x95\\x91\\x8f\\xcdc\\xdf\\xbb\\xf1\\xeb\\xd7\\\\\\xf3\\xe3\\x1f\\xff\\xe8\\x86_?\\xff\\xeb\\xe7\\xa1=\\xf9\\xfc\\xf3\\nA\\xa0\\xc2\\'\\xadT\\xf8\\x86=\\xc2\\x17\\xa3Tg\\xf4\\x8c\\xf4\\x92[\\xef\\x9d4N\\xf8\\xc6\\x9a\\x91\\x0e\\x05P\\xa7\\xa2\\xdd\\xe6\\x13\\xcd\\xbc\\x00\\x85\\xda\\x83zx\\x1a\\xd2\\x00\\xdf\\x15\\xc2\\xd1\\xab\\x0f\\xa9\\xab\\xb4\\xd10QW\\xfc?\\xc5H\\x1d\\x1a\\xcf\\x0f\\x1d\\xb6\\xac\\x945M]\\x93$Q\\x1e]\\x1c\\xe6\\xbe\\xfbo\\xb8\\xe1\\xd7\\xd0\\x9e\\x7f^\\xfbOA\\xa8\\xab\\xd0\\x84\\xf0\\xd5(\\x8e4j,\\xd4\\xaa3\\xdbwn\\xdfy\\xee\\x94\\x8b\\xa7\\xcdr\\xfb\\xc6\\xd5\\xc6\\xd2/T\\x10\\xaa2\\x8c\\x86P\\x0eG\\x08\\xab\\x01F\\x84\\x8d\\xfa]V\\n=\\x10\\xa1X\\x9e\\x10B\\x08\\xcbp\\xd8%\\xf5\\xa2\\xda\\x11\\tM\\xbe\\x00=\\r)\\xdf\\xf4\\x96\\xd5\\x9c\\x1bn\\xd0!>\\x8f\\x08\"\\x84v*|)\\x91N\\x85\\x1e\\x0b\\xcf\\x9dr\\xeb\\xbd\\x0f\\xe4x|\\xe3ncE\\xa8\\xa6\\xee\\x94-B\\nN|\\x08G\\x18\\xb0@\\x88\\x06\\xf8\\x90\\n\\xcb\\x13Ua\\x18B_w\\x1b\\xc3\\x11\\x01\\xc3\\x1c\\x1b0$F\\xb2\\xc19\\x86\\x9c\\xc89\\xfb{\\xd7\\xfc\\x08!D\\x8e\\xf4\\x0f\\xd0\\x91\\xaa*|\\xd2J\\x85\\x89\\xf4\\x0b\\xdf\\xdb\\xff\\xec%\\xb7\\\\|\\xefc9.\\xdf\\xc4\\xd8\\x98\\x11\\xaa\\xd5\\xb2X\\x8e\\xd4\\x84P+\\xb0Y!\\x94\\x8c\\x8e4A\\x15BNF\\x84\\xbe\\x8e\\x92\\xd5\\x1c\\x0b\\x86\\xc3\\x02\\xa1\\x896\\xb2H\\xf2\\xfe<\\xd3\\x0f\\xd6\\x0f\\xfa\\xed7*i\\x8c.\\xc3\\x18\\xb10~\\x15\\xee\\xbfd\\xca\\xad\\xd7\\xdd9\\xab\\xdf\\xe3\\x9b@\\xb3\\x1fl\\x92\\xe2T\\xa1$\\'\\xe6H\\xb5yOf\\x84p\\xa0A\\xab\\x91\\xb1\\xb0S~\\n*\\x94\\xc8.\\xf3\\xdd*\\x9b\\xc3\\x08\\x1c\\r\\xa7\\t\\xc0\\x91/\\x9e\\'-^r\\xe5\\xcd\\x99{\\xf7}ZF\\n\\x10\"\\x11>\\x19_\\xa7b\\x13*\\xb0\\xe9\\xb1\\xf07\\xd7\\x02\\xe5\\xdd9k\\xc2\\xa4\\x17\\x0ba !G\\x1a\\x15\\xa1\\x04\\xd5at\\xa4V*\\x0cM2ST\\x08|\\xaf\\x94\\xa8\\n\\xb5g\\xa3+\\xfc\\x81\\x07K\\x05\\x18V\\x12\\x8d:\\x17\\x83\\xfey\\xdd\\xd1\\xfa\\x85\\x80\\xe5\\x8d_?\\xff\\xa2s\\xbe\\xf1g\\xab~aX\\x8d\\xf4\\xaf\\xa6\\xea\\xcc7\\xaf\\xbd\\xe5\\xfe\\x9b\\x01\\xbb\\x0b\\xbc\\xbe\\xd3e\\xe3\\xe0H%)*\\xc2pG\\xaa\\xddE\\xbe\\xcbi\\xcaH\\xa5\\xd0\\x84\\xf91\\xc4B)\\x12!\\xe84\\xe6\\x8d\\x06\\xc1\\xc4}\\xc3\\xbc`\\x9ea\\xebcV\\x16\\x9c\\xde\\xfe\\x9c\\xd9\\x80\\xe6=\\xf7\\xdcx\\xe3\\xfd\\xf7\\x9f\\x7f\\xd1E\\xe7\\x9c\\xf3\\x8do(\\xfc~\\xfb\\x86\\x1e\\x0b\\x7f\\xaf\\xd8\\xf7\\xbf\\x7f-\\xe0v\\xff\\xcd\\xf7\\xdcw\\xe7\\xa4\\xb99\\xa7\\x0f]L\\x84 \\x05\\xa9\\x89/#\\x05\\xb7d\\x91=Bx\\xdb\\xc2\\x10\\xca|[\\xc8\\xc5\\xf4\\xf7\\x19\\xac+2\\x16\\xba*VA\\xabp%\\x92\\xce\\x84F2*\\x17\\xf0\\x9c\\xc4\\xf2\\\\@\\xbb\\x1cA\\xa4\\x98\\xdc\\xc4\\xee\\xb5\\xc7\\xe5\\xed\\xc8\\xc9\\xb9`\\xee\\xdc\\xd9\\xb3g?\\x86l\\xf6\\xecYs/\\xb8 \\xa7\\xc3\\xebr\\xfa\\xce\\x9c\\xd9\\x97\\xb9\\xa5\\x98\\x08\\x9b\\xf5t\\xa6<^\\x15:\\x02hF\\xbc]\\xdd\\xc0\\x01\\xa7l\\x1b\\x1c\\xa9\\xbb\\x8e\\xe2\\x15\\xa3\\x89:\\xf7)!T\\xb2\\xd3\\xdaQ\\xb0NG\\x82\\xd5_\\x91&\\xc8\\n_\\x8aX4G\\x1aS\\x85\\xa2\\xa4e!\\xb4\\x1d\\xc2J\\n\\xa53\\xb5\\xe1\\xb1p\\xd8\\x86F\\x03\\x05{\\xe9!\\x84\\xdeV\\x95 \\xcf\\x11vU9\\x07\\xa5;R[=\\xf4\\xb7tI\\x01\\x16f\\xc8\\xa4\\xcc\\xd6t\\xa46B\\x85M\\xcc\\xc1\\xa6\\x86 \\xe4A\\xdb=\\xfb-\\x04\\xcc\"D8\\xef\\xac\\xa3\\x1e.a\\xa2Jm\\xca\\x9d\\x9d\\x04\\x12\\x94\\x1e`=m\\xca\\xc4}e\\x01S\\xa3\\xcd;\\x8e\\x1ah\\x16\\xe6\\xb4}\\xd1*\\xd8+\\xba(\\xf4x\\x82\\xc35\\xa7\\xb8\\n\\xe3)\\xb09x\\xa8\\x17\\xce\\xee\\x89^E\\xc3\\x95(<\\x9c\\xff\\xe0\\x1d\\x16\\xa0#\\xe5l\\x86\\x18\\x9b\\xd1\\xea%\\xb6G\\xff^\\xb9\\x96m\\n\\x04c\\xd3h\\x085b\\xda\\xa3^\\xb1\\xbb\\x16\\xac\\x9b\\x84\\xb3\\xaf\\x98\\xe2TWa\\x1c\\xf3H{\\xebE\\xad,\\xc6\\xda\\x8d\\x17\\x16\\xc3\\xba\\x97\\x88&\\xe9\\xba\\xbaH4S\\xc9f\\xe8\\xaf\\x82\\x85\\xcb\\x9c\\x84<\\xfd{\\xed\\x1c\\xa5\\x15\\xb1\\xe5!\\xebFKa#Y(\\x89\\xf1\\xf3VPpZ\\x9dL\\xb6yS[\\x85\\xf18RW\\x1b\\x0c@\\x94l\\xcd\\xc3Y\\x8e\\xd2\\x19\\x19\\xf5\\xc3\\x16\\xc1\\x0e\\x04%\\xd8\\xccK\\xeaaQX\\x0b\\x8d\\xd0/\\xf6\\xa3n\\x87M\\x0eR\\xcb\\xa2\\xeaL\\xcc$%K\\x80\\x01\\\\j\\xecMe\\x84R\\\\\\x8e\\xd4W\\r\\xbb\\x0c\\x1c\\xb1\\xdc:\\x83H\\xe3\\xb5\\xdc$P\\x87\\x166\\x94\\xa0\\x8c\\xd4f\\x80\\xca\\x03\\xd6Hh\\xf3>\\xd8\\xd0c\\x91A\\x04a\\xbf\\xdc\\xba\\xf7\\xe2\\x99\\n\\x1ai\\xd5\\xb9\\xa1X?p\\x03z\\xa8\\x08\\xae!\\xb5U\\x18\\x17\\xc2Z\\xb4\\x1e\\xd0\\xbf\\xc0\\xf2\\xdfWnD+A\\xf5^`\\x15\\xac\\x06\\x04\\x89y\\x96G\\x1f9\\xcc\\x07\\xd5\\x89\\x8brch9K\\x03\\x14\\xb3$Z\\xe7\\xb1\\xbd\\x879-\\xb3\\x92\\x1ac\\xbe\\xd3\\xb1cP\\xf3\\xfe\\x01\\x82\\xe8Li\\x15\\xc6\\xb7\\xa6\\xa2R\\x8bZ\\x12/\\x94Z\\xde\\xbab\\xb0RE+|\\xe9YF\\x03\\x1ab\\x148\\xcb\\xad\\x14*\\x18\\x96\\xd5\\xb4m\\xe8\\x1e\\x80\\xc9L\\xaac\\x90\\x02\\x8c\\xe5T\\xa6\\x16\\x06\\xd5\\x03\\xdab\\xd6$=MZN\\n\\x10\\x0e\\xa5\\xb6\\n\\xe3Z\\xe5;Bs*BA\\x0e\\xce\\xb7Nw\\xb4\\x8e4\\xc5\\xe8\\xabD\\xbd\\xa3\\x1c\\x9c\\xcd\\x1d\\xcc\\xb2\\n\\xaf]\\xa2\\xdas\\x03M\\x8c\\x89I\\xb5\\x1f\\xba?\\xd2\\xaa\\x91\\xa7\\x1c,\\x17U\\x86ty\\xa6\\xd0\\x17\\x1fBI\\xc9\\x89\\x97\\xa48\\xc2x\\x1c\\xa9\\xb3\\x89\\x15\\xb4a\\x05\\xb1\\xc6\"7\\xe8AK\\xb8y\\xc3\\xea\\xb4B\\xb4\\xb7\\x89\\xccZ\\xccakA\\xd5hV2\\xde\\xe0\\x0c\\xb8P\\tL)\\xb4hT\\x89\\xc6uy)\\xf6\\x0b\\xc6\\xdd\\xa3\\xf0\\x01\\r\\xc8\\xdd\\xa9\\xaeB)\\x8e\\x95M\\xd9\\x0c\\xea\\xc4\\xb1\\xf9\\x11\\xbd\\xfb2\\x1a\\xee\\xf8\"\\xf0\\xe5!\\xa7\\xd8\\xcc2\\xda\\xd1Y&7\"\\xb0\\x8d\\xd4\\xa0\\t\\x14\\xfcp\\x87\\xa9\\x80\\x06\\xd7\\x9a\\xd1\\xc1\\xa6\\x88F\\xbdi\\x0c\\xaa\\xd5\\xd6\\xc7\\x9e\\xa7\\xd6\\xc0i\\xab\\xd0e\\xbeq$\\xe5U\\x18\\xc7\\xfa\\xc2\\x81L\\x98\\xae\\xc8\\xfc\\xe1\\xf0\\xd9\\xd9\\x05\\xf3\\x08T\\t!\\x0c\\x93\\xbd\\xbd\\xf3\\xf4\\xcd0\\x0e\\xcd\\t;Ao\\xae\\x1f\\xadB\\x0b\\x9b\\xec\\x9d\\x8e\\xaa<\\xb2\\x98\\x1f\\x16\\xee\\xfa\\xa7\\xfaa\\xbe*\\xda\\xac\\x0b0Y!\\x8bVA\\x8d\\xa6t\\xbfP\\xe32\\x1c\\xbb\\xfe\\xbeP\\x16`F\\xc3\\xd2\\xed&_ZY\\xc3\\xf3\\xa8`=\\xcf\\xa8\\x9c\\x0c$\\x03\\x8e\\xa7\\xcaMC>\\x9d\\xcb8\\x1ev\\nE\\xbfY\"C2t\\x96`\\xc5`\\xb5\\xa9Q7h\\xc4\\x07\\xe0d\\xc8\\xd8+\\xd1\\x96\\x12\\x0c|\\x1a\\x98\\xfc\\xd4\\xaf\\xce\\x085\\x9d\\xdd\\x96\\xd6\\x10B[P\\xc7r\\xf0\\xa6\\x0b\\xc1\\x9a\\xf9\\x0e\\xa8\\x90\\x8e\\x95\\x0bD\\x81\\xd4\\x86v8^2my\\xd11\\xcar\\x82:\\xd5\\t4\\xa9_X\\x06\\xb5\\xe0\\xee\\\\(\\x83},\\xb4Y\\xa7\\x94T\\x12\\x9e\\xb1\\xd0\\xb0K\\xce\\xb2\\xc1\\xfa\\xc5\\x05\\xf0<\\xde\\xb2\\x85\\x8dj#e\\xda\\x14e\\\\s\\xea\\x1e\\xe9\\x88\\x1c\\x01\\xf24\\x14\\x8a\\xc8\\xf5\\xcbde*#\\x0c\\xc0Z\\xb4\\xcc(\\x1b\\x0e\\x9aL\\xd9\\x80\\xb0\\xde \\xaa\\xc5$\\'#g*S\\xab\\xdb\\xfazzj{\\xaa\\x87i\\x01\\r\\xb0\\x8a\\\\0l\\xf9h\\x11\\xcbH\\xfa\\x165<\\xd5\\xaa4\\xa9Mo\\xa5\\x05\\xb4\\x05\\x8d\\xc8\\x91\\x11\\xd9Q7\\xc1\\xa2\\x81\"\\x19L\\xcc\\xef\\xca\\xaa\\xadU\\x1aQ\\x0c\\x1a\\xc7\\r\\xf0d\\x8dA\\xb9\\x95\\x8d\\x83m\\xd5\\x8b\\x8akk\\x97/\\xad\\xaajV\\xac\\xb2\\xa2\\xa7\\x8bU\\xf6\\xe1\\x806\\xecNm\\x15j9\\nA\\xd0Vf\\xdc\\x81\\xce\\xddD\\xf2L\\x10.\\xe6\\xe3\\x19\\x1alx\\xc0\\xf24\\xc3\\xa3q[\\x92\"K\\xc3\\xdc\\x9bs\\x0e\\xc9rz\\x13\\x81\\xe6\\x04\\x8ag8\\x8eA\\xdb\\xdd\\x914\\xc9Ev\\xff\\xf2X\\xb4\\xb5\\x05\\xe8S\\n<\\x10\\x1d/P\\x1c\\xcb\\xc39\\xa8AJ\\xe0\\x8c\\xcb\\xab\\xaa\\xc0~(\\x02\\x18\\xa0\\x02\\x1b\\xdb\\x04\\xa5@\\x90$E\\x01\\\\\\x17\\xe1\\x87\\xb3hD\\x99\\xfb;\\x18/\\xd47X\"e\\x12}\\xa1}=h|~\\x0b\\xeax?+\\x85o\\x95\\xa5\\xcf\\x84\\xf1\\x13\\xc1\\x88\\x85k\\xfd\\xa3\\xa4\\x1f=&\\xda\\x1eB\\x92\\xa1\\x9dH\\xf8\\xad\\xd6\\xf2\\xba&3\\\\\\xe8\\x83\\xfa.l\\xb0&.\\xd2\\xfe\\xa0)\\x97\\xa9\\xa2\\xb5\\x8d\\x1cD\\xfdc\\x92\\xba\\xed\\x13lO1\\xd5\\xae\\x14G(\\x85\\xef\\x1d\\x0870\\xd3\\xaa6&\\x17\\xb4\\xa4\\x943\\xceK\\x91\\x8c\\x7f([\\xcbX\\x94O\\x1d\\xf3LM\\x8cg\\xd0\\x16\\x9cZ\\r?\\xf6\\x83p(\\xc8\\xd6\\x06\\x94\\xc9\\x9b3\\xd5*\\xdajG8x]\\xa2\\xc4\\xa4\\x8d\\xf8R^\\x85\\x92\\xd5\\xbexp\\'\\x0cs\\x14\\xe9\\x1c\\x14\\x19.\\x8c!\\xf4\\xc4\\x8c(-\\xb5,\\xeb\\x80\"\\x0c\\x17j \\x85 \\xb2\\x9c\\x18\\xa8\\xb5\\x1e@\\xeeX\\xc4\\xcb\\xc1\\xd0^\\xb2\\xc6Io\\xa0\\xd1UfU!\\x84\\xc6\\r\\xd8\\xf4/\\tz\\xb4\\xc0\\x97\\xfa\\x08\\xad\\xb66\\x84B\\x0cC\\xe8\\x1bI\\'\\xa4\\x80\\x92\\xa1\\x88h:\\xa8\\xf6\\x17)@5\\xd9\\x94\\x92;\\nCMB\\xfb\\x8a*\\xb3v\\xf94\\xdbL\\xd1\\xb5\\xbc\\x94\\xd7v\\xeb\\x12%\\xc4^Tv\\xef\\x0b\\xb0i\\xe1OJ\\x0b\\rg\\xfe\\xea\\xdc$Q\\x1b\\x01\\x01\\xdf\\xe5\\xfbRG\\x83\\xd6\\x1b;3,\\xf8%\\x80\\x9dA\\x05F\\xd0\\xbeP\\xfe\\x0c\\xfd\\xae\\x0f\\xcf\\xe5<Em$Hc\\x04ZR\\x97:\\x81?)^\\xa6Xvx\\xb9}\\xd6\\xb7\\xa4<\\x082\\x12\\x194Q\\xd7G\\x81\\x0c\\x85\\x12)\\x9e\\xad/\\x896\\x8aW\\x90\\xb5\\x1a\\xec\\x02,)\\xd9\\x902@\\x08v.\\xa6\\x95F\\x8d%\\x11\\x9bt-\\xe5@\\xc2\\x036\\xf6\\x03y\\x95\\x14\\xd4\\x9e\\x13\\nd?\\x02\\xe0\\xc8\\xb7\\xb5x|\\xa9\\x8dp\\xea\\xe8pt\\xeb\\x8a\\x04\\xe3\\xaeL\\xaf\\xe3x\\x8e\\xe6xF\\x02\\xd3\\xa5i\\x90\\x0f6\\x96G_\\x96\\xe9\\x19\\xca\\xafg\\x95-\\x96y\\x1e\\x8c\\xe1\\x83&`\\x1b\\xbd\\xae\\xe5\\xb1\\xe4QP\\xdbJ\\x83\\xdd\\xb5\\x95\\xe9N,\\xc3\\xd3\\xe0Dl\\xd7|\\x8bF\\x8e\\xfc\\xaeR\\x92\\xa6\\xfd~?AK\\xda\\x9cr&(p<\\x91\\xd9W\\xe4\\xf6\\xf9R\\x1c\\xa1\\xbb\\xc3\\x1d\\xd5:\\xdc\\x96U\\x9b\\x81\\xca\\x92\\xf4\\xd6R\\xa0\\xa8\\xc6\\xc6\\xd2\\xb6\\xbe\\x92\\x15q\\xf8\\xaa\\xde\\xe6\\xc5\\xe9m\\xa5Jf\\xd3X7Z\\xbe\\xb0\\xc8\\x11O\\x96\\xe8\\xee\\xccno\\x9a^\\xd7(\\x0bZ\\xa3\\x06\\x9bF\\x9e\\xde\\xee\\x15-\\xb5\\xed\\xe9]\\xadi\\x99u\\x8d\\x02\\xb8\\xac\\xb4\\xa6\\xac\\xbc\\x15\\x03\\xbeT\\xb3\\xf1}\\xd5\\x88\\xb7w``d`\\xa07\\x81\\xea\\xa3\\x0b6IH\\x1a\\xce\\x0e\\xd0*\\xceF\\x1ew\\xbf\\xfa\\xe1\\x81\\x81~\\x97/\\x15\\r\\xbf-\\x06#\\xc4\\x86\\x11b\\xc3\\x081Bl\\x18!6\\x8c\\x10\\x1bF\\x88\\x11b\\xc3\\x08\\xb1%\\x1dB\\xe7Hwg\\xb7C\\x7fc\\xaa\\xd3\\x0b\\xcdP\\xa0\\xeam\\x00\\x9f\\xe8\\x80\\x9fp\\xb9\\xd1t$7\\x1a\\x03p\\xf5\\x03\\xeb0V\\xb4\\\\\\xa8\\xb9~8`\\xe1\\x07\\x00\\x9f\\n\\xfb\\'\\xf4M\\xe3\\x91::\\x06Fz\\xbda\\x95\\xda\\xfe\\xee\\xce\\x02C\\xc1\\xcd\\xe9\\xee\\x00W\\x10\\xfe\\xa1\\xb0#\\xa5,\\xc2\\x95\\xd5u\\x0c\\x18\\r\\xa8\\xbf\\n\\xfd\\x1d\\r]\\xf4!@\\r\\xe954+p5\\xdah\\xa0\\xabzP[3\\xd1\\xdb:\\x88V\\x94\\x15\\xd6+\\xd6\\xba\\xa8R\\xbf\\x87\\xed\\xa3\\xe5\\x1a\\'Gk+<\\xde\\xe8\\xa8V\\x0b\\xf7\\x96\\x0f\\xa2\\xc9gy\\x83\\xe8\\xdfB\\xd3\\xb6\\xbd]\\xc3\\xc3\\xad\\x86\\xd94\\xb5\\xf5\\xf5u\\x8d\\x8d\\xc3\\xd5-\\x06b#\\x85\\x83\\x0c\\xcb\\x8d.\\xd6\\'\\x10w\\x0f*\\x170\\xdc5\\xdfX\\xd7\\x1eY\\x06\\x8e\\xd4\\x90\\xfa\\x08\\x0b\\xfc\\x1c[W_ZJ\\xa3E\\xcfU\\xe0\\xbd\\x9d\\xe0\\x85\\x91A\\xb1\\x15\",\\xab\\x0f\\x92\\x02Ep\\xa4\\xb6\\xd6\\xd9=\\xec\\xd7\\xd6\\xc5\\x8f\\xc82z\\x11H_\\x10\\xec\\x9e\\x7f\\x88c\\xd9B\\x84\\xbd\\x9a\\x86\\xcd\\xbb\\xc1\\xdcS\\x8a\\x04\\xa3\\xb5\\xc1\\x00\\xdc\\x94\\xd4;\\xcc\\xa3s\\xb5\\x07\\xc1\\x0b\\xd4D\\x82\\xa1\\x0c+\\x1e:\\xc1\\xee?\\xaca\\xd6g\\xb1:m\\x15\\x8c\\xfe5\\xe9c\\x8b#\\xa3\\xe0MZ`\\xcf\\x04\\xae\\x1aa\\x1d\\x02\\x03\\xce\\xc0\\xd6\\xb0i\\x86\\x01\\xfa\\x0c\\x9a\\xf2s\\xcbS\\x1fa\\t\\xd7X1\\xd0\\xdb;\\xe0@\\xc3EU,1\\x7fH1\\xb8\\x08\\xc1\\x93\\xcb\\xd0\\x0b\\xbbGF\\x1c\\x9d\\xda\\x80\\xa0\\xb7\\xd5\\xaf\\x11\\x18h\\xd4\\x97h\\xf6\\x05\\xe7uv\\xaf\\xcc^\\x16d\\x91|\\xaa\\x896\\r\\xa1{hh\\xc9\\x926y\\x18\\x1cp\\x89\\x17\\x1e\\x80A\\x08\\x1d\\xea\\x89V\\x94\\xd2th\\xc5\\xc3bj\\xfd?R\\x86\\xb5\\xe0=r\\xfdPCge\\x1f\\'\\xa37;9\\xfb\\x18\\xa2\\xa4a\\xa0{\\x0eE\\xa2\\xb5\\xc1C\\xf2\\x9a\\x99\\xb7\\xdd\\xf6\\xf0\\x15\\xa5\\xe2\\x82\\x903M_3c\\xc6\\x9arg\\xca#\\\\\\xc4\\xa7\\x99G\\xb5\\xab(\\xda4\\x7f\\xa2\\x81\\xa3L+\\x88\\xac\\x116\\xa9\\x8a\\xa6\\xf5%\\xf3:B\\xd5\\xba\\xe46\\xe3\\x01\\x18\\xf36\\x07y\\x14W\\xab\\xdfhO\\x17\\x9f\\xb5\\xd2\\xb8\\xf8\\xb3G\\x9b\\x80\\xe5\\\\\\xa4sv0\\xb4\\xba\\xe4\\xc9\\xdb\\xc4 \\xd4\\x00\\xe1m\\xca\\xff\\xaf\\x0e\\x846f\\xe8\\xcd\\\\\\xf3\\xf3\\x9f\\xaf\\xa9\\x1bHy\\x84=\\xd2!\\xf34\\xce*\\x9a6-\\xc5+b\\x89\\x95q T\"\\x9f\\xb7&\\xd8n\\x87\\xd0c\\x8b\\xb0\\x99\\n\\x96\\x87\\xb2\\x0e\\x07\\xcd\\xb7\\xf4g\\xd2W\\x19U\\xa8\\xca\\xbf\\x9bd\\xa0S,b\\xe0\\xfe\\x15\\xcb\\x19\\xaa\\x1b9R\\r\\xe1\\x97\\xd6\\xe8\\xbb\\xf3\\x83=T\\xa8\\xdbn[MU\\xa6<\\xc2!\\x8a\\xa6\\xdb\\x97\\xb8L\\x08\\x9b]\\x86\\x8ct\\x15\\xc7\\x15\\xc4F\\x98\\xebQ\\x9f{\\xa9X\\x8f\\x85\\xf1\"\\x1cH\\xa3J\\r\\xeb&2\\x04\\xc2\\xe1\\x9bJ\\x87V\\x7f\\xf6H\\x1a\\xc2\\xdeR\\x0eJ<\\x9b\\x83\\xcb\\xdfV\\xb2\\xc1!\\xb3\\n\\xaf\\x90B*l\\x97\\xa6\\xbb\\xbd\\xd3\\xf9\\xfc\\x94G\\xe8\\xcb\\x03\\x93\\xb2\\x89\\xae\"]\\x07U<?oY+0\\xb8\\xc3A-\\xc5:b#\\\\\\xd6\\xef\\xedh\\x98\\xc3I\\x95\\x89\\xaa\\x10\\xbcF\\xcb\\xf8\\xde\\x0b\\xe7\\x1c\\x01lk\\x93\\xc1\\x84\\xd6\\xbc \\x15\\xf6\\x0f\\xa2\\xd5\\xc3\\xb5L\\xa9\\xe6\\x1d;et>\\xa0\\xc2G]\\xaeGff\\x8a\\xfa\\xa68\\xee\\xb45\\x17\\xfa|\\x17\\xae\\x99\\xd7\\x91\\xf2SqB\\xdf\\x00\\x00\\x03]IDAT\\x08}\\x9d\\xe9b\\x80\\xa1\\x9b\\x1cz,\\xe4IN\\xd9\\xa1>;\\x11\\x84tkk\\r\\xc90\\x0b\\\\\\x89\"\\\\E\\x07{\\x0cG\\xef-\\x95V)+\\x0c\\xf9\\xe5\\x91\\x08\\x03\\x91\\x08e\\x84P\\x0eL\\xbf\\xf2\\xca\\xb45\\xc1R\\xbdw\\xd2\\xc9\\xae\\xb9\\xcb\\xe7\\xbbkMp(\\xf5\\x11\\x82\\x8c\\xa5\\xa4\\x86#\\xd0Ns \\x9d\\xa9h\\x00\\xd6\\r=R-\\xcd\\x9a\\xe66y\\x97\\xc1\\xfe\\x87Cb[t\\x84<K\\xb0\\x02\\xb1P\\xd7r\\xbc\\x08\\x97\\x80\\x97\\x83\\x18eR)\\xf2\\xe5\\xed\\xedY\\xa5\\x84\\x9eI\\xea\\x083\\x83\\xd0K\\xd7r0G\\xe9\\x94\\x84f\\x84\\x10\\xbc\\xb5\\x19lJ\\xbc,\\xe4\\xf3ky\\xe2\\xbc\\x0b\\xaf8/@\\x96\\xfc= \\x04\\x8a\\xaa\\xe6\\x88n\\x84P0e\\xa4\\xd9\\x04oZ\\xe3\\xec\\xe9\\x82\\x9b\\xb0u\\x87\\xder\\xd5\\x17\\x1c\\x1d\\xea.\"\\x88\\xd0B\\x870\\x84\\x92\\rB\\xf0\\xb2f\\xf3:\\x9a|\\xb0\\xa4\\x90 \\xc0\\xabBK\\x07\\xc2\\x10\\x8e\\x10\\xe8\\xdd\\t\\xd9\\x8c\\xa0\\xf9\\x85\\xca\\x80\\xa4\\xc7B\\xb9\\xa2\\xacl\\xaaa\\x8d\\x94\\xab\\x89\\n\\xac\\x01\\xc6\\xb0\\xcb\\\\\\x7f\\x17\\x08}\\x95,S\\x89b\\xa1hr=\\x95\\x1co\\xde\\xf7\\xa7\\x0f\\xbec\\x12l\\x02\\xbc\\xc2\\xd4\\xa9\\xc8\\x12Bo.\\x8cO\\x85\\xce,Z\\xce0\\x1e\\xdb\\x9d&\\x8f\\xae\\xca\\xce\\xce\\xc8b\\xe9\\xa2\\xb0t\\xa6r5\\xfa\\xd6\\nR\\xd0\\xcaBWIt\\x01\\x8a\\x85\\xcaZ\\xfa26T\\x13( \\xb8\\xea\\x8c\\xec\\xec\\xecj\\x89k\\xf8\\xfb@8\\x9f\\t@pU\\x1ckR\\xe1@#\\xd9d\\x9a\\xe5\\xbb\\\\\\xa0\\x14t\\xce\\x05L\\xe6@\\x08!@4\\x92IN\\xf5$\\x84\\xb0\\x85!\\xe6\\x98\\xe3\\xb2\\xc4\\xa8/\\xac\\x18\\xa8\\xe3\\xe6\\xe8*T\\x97\\x90\\x17\\x8c\\xea/\\t\\xee\\xcd\\x0c\\xe6*W\\xe4\\x18d\\xd0\\xfb/\\x86$U\\x8f\\xc5\\x12U\\xa6\\x97f\\xf8!\\xedA\\xa33R\\x1caCvKUee-%\\xa0l\\xbc\\x8a\\xe2\\xd2\\x95\\x15\\x99\\xb5\\xe8E\\xc8\\x0b9z\\xd9\\xe2\\x96\\x96\\x8aZ\\x98\\xd5\\xf4\\xd7\\x073k\\xab\\x96\\xa6\\xd3A=\\xcah\\x08\\xc1;\\xcf\\xd8\"\\xebN\\x85h\\x89\\xd0\\xdbJs\\xb9\\x85\\x85\\xe0E#\\x850\\xa6\\xd5\\xb2\\xbc\\xaa\\x19g\\xb9\\x1f\\xbd\\x9c\\xb0Gl\\xec\\xa9]\\x9cU\\xcap\\xfa6my4\\xd7\\x95]\\xb5\\xaa\\x86\\xe0P\\x02<$\\xaa\\x1b\\xb6\\xf5\\xd6\\xf0h\\x85\\xea\\xe4`\\x8d\\x16B\\xeb\\xfd)U\\xa0\\xb1@\\xd8\\xc2\\xb1\\xe0\\x95\\x8e,SZ\\xa9w\\xe5\\xd1\\xdaP\\xb4\\x0e{r\\x10,\\x07\\x15\\xfc(u\\xf0\\r\\xd5\\x93\\x04G1\\xe4\\x02=\\x0f\\xa9\\xe6\\xa7+\\x88\\xdc\\xb9\\x1czuk57l\\x08A\\xcb\\xe8Q\\x8f\\xc1Y\\x92\\xd5\\xf0\\xabL\\xedL\\x04\\xc1h]y\\xef(1\\xaa5\\xcb#\\x08\\xe8\\xa5\\x0b\\x95\\x95\\xab\\x84\\x9f(\\xbd)\\xf4r\\xf4v\\x8a\\x04\\x95T\\x9a\\xcaCp\\x86h\\xad\\xa4\\x94!C\\xcd\\x8d\\xf8i(cP\\xd5q\\xa46\\xc2\\x82\\xc2\\xbe\\xdc\\xb6\\xd6\\xae\\x12=\\xa9(X\\xd8\\xa3Zq6\\xba?\\xae\\xa2E\\xb9\\xadm]\\xed\\xfa\\x9d\\x18\\xa9-omM\\xaf\\n1\\xaa\\x80\\x1f.+n\\x87\\x8elyq\\x9eA\\x85\\xd9\\xc5y!%\\xb8\\xe6\\x17f\\xe8_i\\xe7\\xea\\x81*\\xec\\xed\\xe9\\x81\\xe0Fz\\x8a\\xe1\\x13SU\\xdc\\xbeh\\xd1\\xa2\\x9e\\x0ccZ\\xec\\\\\\x99\\xd5\\xd6\\xda\\xb40\\x14\\xb3\\x1d\\xc5\\xc5\\xea\\xbf\\xbb\\xf2\\xda\\xb5W\\xaf\\x83o\\xc0+Y\\xd2S\\xd8\\x9d\\xda\\x08\\xb1a\\x84\\xd80Bl\\x18!F\\x88\\r#\\xc4\\x86\\x11b\\xc3\\x081Bl\\x18!6\\x8c\\x10\\x1bF\\x88\\x11b;[\\xec\\xff\\x00\\x17\\xa7ST\\xd7\\xc5\\xb2X\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'"}