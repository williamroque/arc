{"tranche.py": "class Tranche():\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period, despesas=None):\n        self.title = title\n        self.saldo = saldo\n        self.taxa_juros = taxa_juros\n        self.pmt_proper = pmt_proper\n        self.c_period = c_period\n        self.despesas = despesas\n\n        self.is_finished = False\n        self.phase_list = []\n        self.row_list = []\n\n        self.queue = None\n\n        self.i = 0\n\n    def next_phase(self):\n        self.phase_list = self.phase_list[1:]\n\n    def integrate_row(self):\n        if self.queue:\n            self.row_list.append(self.queue)\n            self.i += 1\n\n    def get_previous_row(self):\n        return self.row_list[-1]\n\n    def get_completion_state(self):\n        if self.saldo <= 0:\n            self.is_finished = True\n            return True\n        return False\n\n    def calculate(self, i, F_i, tranche_list, tranche_i):\n        if len(self.phase_list):\n            repeats_calculation = self.phase_list[0](self, i, F_i, tranche_list, tranche_i)\n            if repeats_calculation:\n                self.phase_list[0](self, i, F_i, tranche_list, tranche_i)\n        else:\n            self.queue = None\n\n", "spreadsheet.py": "import xlsxwriter\nfrom xlsxwriter.utility import xl_rowcol_to_cell\n\nimport render_style\nimport prelude_matrix\n\nimport copy\n\nimport re\n\nclass Spreadsheet():\n    def __init__(self, inputs, fluxo_creditos, months, taxa_juros_sub, taxa_juros_anual_sub, tranche_list, sub_length, sen_length, fluxo_financeiro):\n        self.inputs = inputs\n        self.months = months\n        self.fluxo_creditos = fluxo_creditos\n        self.tranche_list = tranche_list\n        self.fluxo_financeiro = fluxo_financeiro\n\n        self.workbook = xlsxwriter.Workbook(inputs.output_path)\n        self.workbook.set_size(1400, 1000)\n\n        self.sheet = self.workbook.add_worksheet()\n        self.sheet.hide_gridlines(2)\n        self.sheet.set_default_row(18)\n\n        self.sheet.insert_image(\n            'F2',\n            '../logos-logo.png',\n            {\n                'x_scale': 0.75,\n                'y_scale': 0.85,\n                'x_offset': 10,\n                'y_offset': -10\n            }\n        )\n\n        self.formats = {}\n        for key, style in render_style.formats.items():\n            if style['is_template']:\n                self.formats[key] = style['format']\n            else:\n                self.formats[key] = self.workbook.add_format(style['format'])\n\n        self.p_matrix = prelude_matrix.create_matrix(\n            self.inputs,\n            taxa_juros_sub,\n            taxa_juros_anual_sub,\n            sub_length,\n            sen_length\n        )\n\n        self.x_margin = 1\n\n        self.prelude_x = 1\n        self.prelude_y = 11\n        self.prelude_width = len(self.p_matrix[0])\n\n        self.fluxo_creditos_x = self.prelude_x + \\\n            self.prelude_width + \\\n            self.x_margin\n\n        self.fluxo_creditos_y = 2\n        self.fluxo_creditos_width = 3\n\n        self.tranches_x = self.fluxo_creditos_x + \\\n            self.fluxo_creditos_width + \\\n            self.x_margin\n\n        self.tranches_y = 2\n        self.subordinate_tranche_width = 8\n        self.normal_tranche_width = 7\n\n        self.tranche_width = self.subordinate_tranche_width + \\\n            self.x_margin + \\\n            self.normal_tranche_width\n\n        for _ in range(len(tranche_list) - 2):\n            self.tranche_width += self.normal_tranche_width + self.x_margin\n\n        self.fluxo_fin_x = self.tranches_x + self.tranche_width + self.x_margin\n        self.fluxo_fin_y = 2\n        self.fluxo_fin_width = 3\n\n    def substitute_static(self, pos):\n        groups = re.match(r'^([A-Z]+)(\\d+)$', pos)\n        return '${}${}'.format(groups[1], groups[2])\n\n    def render_prelude(self):\n        row_margin = 2\n\n        spreadsheet_row = self.prelude_y\n\n        title_height = 1\n\n        self.position_matrix = {}\n\n        for row in self.p_matrix:\n            max_length = 1\n\n            for cell_i, cell in enumerate(row):\n                if 'title' in cell:\n                    title, body, body_format = list(cell.values())\n\n                    current_cell = cell_i + self.prelude_x\n\n                    self.sheet.write(\n                        spreadsheet_row,\n                        current_cell,\n                        title,\n                        self.formats['prelude_header']\n                    )\n\n                    for body_row_i, body_row in enumerate(body):\n                        current_row = spreadsheet_row + body_row_i + 1\n\n                        adjusted_position_matrix = self.position_matrix.copy()\n                        for a_title, position in adjusted_position_matrix.items():\n                            adjusted_position_matrix[a_title] = self.substitute_static(\n                                xl_rowcol_to_cell(\n                                    position[0] + min(body_row_i, position[2]) + 1,\n                                    position[1]\n                                )\n                            )\n\n                        format_inputs = {\n                            'i_next': xl_rowcol_to_cell(current_row, current_cell + 1),\n                            'i_prev': xl_rowcol_to_cell(current_row, current_cell - 1),\n                            'fluxo_fin_start': xl_rowcol_to_cell(self.fluxo_fin_y + 2, self.fluxo_fin_x + 1),\n                            'fluxo_fin_end': xl_rowcol_to_cell(self.fluxo_fin_y + len(self.fluxo_financeiro) + 2, self.fluxo_fin_x + 1),\n                            'prev_body': xl_rowcol_to_cell(current_row - 1, current_cell),\n                            'fluxo_3_sum_terms': '{}:{}'.format(\n                                xl_rowcol_to_cell(\n                                    self.fluxo_creditos_y + 2, self.fluxo_creditos_x + 1\n                                ),\n                                xl_rowcol_to_cell(\n                                    self.fluxo_creditos_y + 4, self.fluxo_creditos_x + 1\n                                )\n                            ),\n                            'despesas_3_sum_terms': '{}:{}'.format(\n                                xl_rowcol_to_cell(\n                                    self.tranches_y + 6, self.tranches_x + 3\n                                ),\n                                xl_rowcol_to_cell(\n                                    self.tranches_y + 8, self.tranches_x + 3\n                                )\n                            ),\n                            **adjusted_position_matrix\n                        }\n\n                        self.sheet.write(\n                            current_row,\n                            current_cell,\n                            body_row.format(**format_inputs),\n                            self.formats[\n                                body_format[\n                                    min(body_row_i, len(body_format) - 1)\n                                ]\n                            ]\n                        )\n\n                    self.position_matrix[title.replace(' ', '_').replace('%', 'P')] = [\n                        spreadsheet_row, current_cell, len(body) - 1\n                    ]\n\n            spreadsheet_row += max_length + title_height + row_margin\n\n    def render_fluxo_creditos(self):\n        self.sheet.merge_range(\n            self.fluxo_creditos_y,\n            self.fluxo_creditos_x,\n            self.fluxo_creditos_y + 1,\n            self.fluxo_creditos_x + self.fluxo_creditos_width - 1,\n            'Fluxo de Cr\u00e9ditos Imobili\u00e1rios',\n            self.formats['section_title']\n        )\n\n        for i, fluxo_row in enumerate(self.fluxo_creditos):\n            row_offset = self.fluxo_creditos_y + i + 2\n\n            current_index_format_template = copy.copy(self.formats['n_index'])\n            current_fluxo_format_template = copy.copy(self.formats['fluxo'])\n            current_date_format_template = copy.copy(self.formats['date'])\n\n            if i == len(self.fluxo_creditos) - 1:\n                current_index_format_template['bottom'] = 1\n                current_fluxo_format_template['bottom'] = 1\n                current_date_format_template['bottom'] = 1\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x,\n                i + 1,\n                self.workbook.add_format(current_index_format_template)\n            )\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x + 1,\n                fluxo_row,\n                self.workbook.add_format(current_fluxo_format_template)\n            )\n            self.sheet.write(\n                row_offset,\n                self.fluxo_creditos_x + 2,\n                self.months[i],\n                self.workbook.add_format(current_date_format_template)\n            )\n\n    def render_empty_tranche_row(self, row, cell, width, border_balance):\n        for i in range(width):\n            border_template = self.workbook.add_format({})\n\n            if i == 0 and (border_balance < 1):\n                border_template.set_left(1)\n\n            if i == width - 1 and (border_balance > -1):\n                border_template.set_right(1)\n\n            self.sheet.write(\n                row,\n                cell + i,\n                '',\n                border_template\n            )\n\n    def render_tranches(self):\n        for tranche_i, tranche in enumerate(self.tranche_list):\n            col_offset = self.tranches_x + \\\n                tranche_i * self.normal_tranche_width + \\\n                min(tranche_i, 1) + \\\n                self.x_margin * tranche_i\n\n            self.sheet.merge_range(\n                self.tranches_y,\n                col_offset,\n                self.tranches_y + 1,\n                col_offset + self.subordinate_tranche_width - min(tranche_i, 1) - 1,\n                'Tranche {}'.format(tranche.title),\n                self.formats['section_title']\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 2,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n            self.render_empty_tranche_row(self.tranches_y + 3, col_offset, 1, -1)\n\n            header_offset = 2\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Saldo Devedor',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            if tranche_i == 0:\n                self.sheet.write(\n                    self.tranches_y + 3,\n                    col_offset + header_offset,\n                    'Despesas',\n                    self.formats['tranche_header_col']\n                )\n                header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Juros',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'Amortiz',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                'PMT',\n                self.formats['tranche_header_col']\n            )\n            header_offset += 1\n\n            self.sheet.write(\n                self.tranches_y + 3,\n                col_offset + header_offset,\n                '% AM',\n                self.formats['east_tranche_header_col']\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 4,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n\n            self.render_empty_tranche_row(\n                self.tranches_y + 5,\n                col_offset,\n                self.subordinate_tranche_width - min(tranche_i, 1),\n                0\n            )\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset,\n                '=1',\n                self.workbook.add_format(self.formats['n_index'])\n            )\n\n            date_format_template = copy.copy(self.formats['date'])\n            date_format_template['right'] = 0\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset + 1,\n                self.months[0],\n                self.workbook.add_format(date_format_template)\n            )\n\n            quantity_format_template = copy.copy(self.formats['quantity'])\n\n            self.sheet.write(\n                self.tranches_y + 5,\n                col_offset + 2,\n                '={}'.format(self.inputs.total * self.inputs.razoes[tranche_i]),\n                self.workbook.add_format(quantity_format_template)\n            )\n\n            row_offset = self.tranches_y + 6\n            for row_i, row in enumerate(tranche.row_list):\n                index_format_template = copy.copy(self.formats['n_index'])\n                percentage_format_template = copy.copy(self.formats['percentage'])\n\n                taxa_juros_pos = copy.copy(self.position_matrix[tranche.title])\n                taxa_juros_pos[0] = taxa_juros_pos[0] + 1\n                taxa_juros_pos = self.substitute_static(\n                    xl_rowcol_to_cell(\n                        taxa_juros_pos[0],\n                        taxa_juros_pos[1]\n                    )\n                )\n\n                pmt_proper_pos = copy.copy(self.position_matrix['P_PMT'])\n                pmt_proper_pos[0] = pmt_proper_pos[0] + 1\n                pmt_proper_pos = self.substitute_static(\n                    xl_rowcol_to_cell(\n                        pmt_proper_pos[0],\n                        pmt_proper_pos[1]\n                    )\n                )\n\n                if row_i == len(tranche.row_list) - 1:\n                    index_format_template['bottom'] = 1\n                    date_format_template['bottom'] = 1\n                    quantity_format_template['bottom'] = 1\n                    percentage_format_template['bottom'] = 1\n\n                col_inner_offset = col_offset\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '={}'.format(row_i + 2),\n                    self.workbook.add_format(index_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    self.months[row_i + 1],\n                    self.workbook.add_format(date_format_template)\n                )\n                col_inner_offset += 1\n\n                formatted_formulae = {\n                    'prev_saldo': xl_rowcol_to_cell(row_offset - 1, col_offset + 2),\n                    'taxa_juros': taxa_juros_pos,\n                    'despesas': xl_rowcol_to_cell(row_offset, col_offset + 3),\n                    'juros': xl_rowcol_to_cell(row_offset, col_offset + 4 - min(tranche_i, 1)),\n                    'pmt': xl_rowcol_to_cell(row_offset, col_offset + 6 - min(tranche_i, 1)),\n                    'F_i': xl_rowcol_to_cell(\n                        self.fluxo_creditos_y + 2 + row_i,\n                        self.fluxo_creditos_x + 1\n                    ),\n                    'pmt_proper': pmt_proper_pos,\n                    'pmt_next': xl_rowcol_to_cell(\n                        row_offset,\n                        col_offset + self.subordinate_tranche_width + 6 - min(tranche_i, 1)\n                    ),\n                    'amort': xl_rowcol_to_cell(row_offset, col_offset + 5 - min(tranche_i, 1)),\n                    'row_sum': '-'.join([\n                        str(xl_rowcol_to_cell(\n                            row_offset,\n                            col_offset - 3 - i * (self.normal_tranche_width + 1)\n                        ))\n                    for i in range(len(self.tranche_list) - 1)])\n                }\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['saldo'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                if tranche_i == 0:\n                    self.sheet.write(\n                        row_offset,\n                        col_inner_offset,\n                        '={}'.format(row.despesas),\n                        self.workbook.add_format(quantity_format_template)\n                    )\n                    col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['juros'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['amort'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '=' + row.formulae['pmt'].format(**formatted_formulae),\n                    self.workbook.add_format(quantity_format_template)\n                )\n                col_inner_offset += 1\n\n                self.sheet.write(\n                    row_offset,\n                    col_inner_offset,\n                    '={}/{}'.format(\n                        formatted_formulae['amort'],\n                        formatted_formulae['prev_saldo']\n                    ),\n                    self.workbook.add_format(percentage_format_template)\n                )\n\n                row_offset += 1\n\n    def render_fluxo_financeiro(self):\n        self.sheet.merge_range(\n            self.fluxo_fin_y,\n            self.fluxo_fin_x,\n            self.fluxo_fin_y + 1,\n            self.fluxo_fin_x + 2,\n            'Fluxo Financeiro',\n            self.formats['section_title']\n        )\n\n        for row_i, row in enumerate(self.fluxo_financeiro):\n            row_offset = self.fluxo_fin_y + 2 + row_i\n            tranche_displacement_offset = 3\n\n            n_index_format_template = copy.copy(self.formats['n_index'])\n            quantity_format_template = copy.copy(self.formats['quantity'])\n            date_format_template = copy.copy(self.formats['date'])\n\n            if row_i == len(self.fluxo_financeiro) - 1:\n                n_index_format_template['bottom'] = 1\n                quantity_format_template['bottom'] = 1\n                date_format_template['bottom'] = 1\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x,\n                row_i + 1,\n                self.workbook.add_format(n_index_format_template)\n            )\n\n            quantity = '0'\n            if row_i == 0:\n                quantity = str(-self.inputs.total)\n            elif row_i > self.inputs.c_period:\n                quantity = '+'.join([\n                    '{}+{}'.format(\n                        xl_rowcol_to_cell(\n                            row_offset + tranche_displacement_offset,\n                            self.tranches_x + i * (self.normal_tranche_width + 1) + 4\n                        ),\n                        xl_rowcol_to_cell(\n                            row_offset + tranche_displacement_offset,\n                            self.tranches_x + i * (self.normal_tranche_width + 1) + 5\n                        )\n                    )\n                    for i in range(len(self.tranche_list))\n                ])\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x + 1,\n                '=' + quantity,\n                self.workbook.add_format(quantity_format_template)\n            )\n\n            self.sheet.write(\n                row_offset,\n                self.fluxo_fin_x + 2,\n                self.months[row_i],\n                self.workbook.add_format(date_format_template)\n            )\n\n    def resize_columns(self):\n        column_widths = [6, 18, 15.5, 14, 17.5, 19, 12, 13.5,\n                         8, 6, 11, 8, 4, 6, 8, 13, 10, 12, 12, 11, 10, 4]\n\n        for _ in range(len(self.tranche_list) - 1):\n            column_widths += [6, 8, 13, 12, 12, 11, 10, 4]\n\n        column_widths += [6, 14, 8]\n\n        for i, width in enumerate(column_widths):\n            self.sheet.set_column(i, i, width)\n\n    def render_file(self):\n        self.workbook.close()\n", "render_style.py": "formats = {}\n\nformats['prelude_header'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'font_color': 'white',\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'border': 2,\n        'border_color': 'white',\n        'bg_color': '#3465FC'\n    }\n}\n\nformats['prelude_text'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter'\n    }\n}\n\nformats['prelude_percentage_0'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0%'\n    }\n}\n\nformats['prelude_percentage_2'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0.00%'\n    }\n}\n\nformats['prelude_percentage_4'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'align': 'center',\n        'valign': 'vcenter',\n        'num_format': '0.0000%'\n    }\n}\n\nformats['prelude_quantity'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'valign': 'vcenter',\n        'num_format': '#,##0_);(#,##0)',\n    }\n}\n\nformats['prelude_currency'] = {\n    'is_template': False,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 9,\n        'bold': True,\n        'num_format': '_(\"R$\"* #,##0.00_);_(\"R$\"* (#,##0.00);_(\"R$\"* \"-\"??_);_(@_)'\n    }\n}\n\nformats['section_title'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'italic': True,\n        'font_color': '#477DC0',\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'valign': 'vcenter',\n        'top': 1,\n        'left': 1,\n        'right': 1\n    }\n}\n\nformats['n_index'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'left': 1\n    }\n}\n\nformats['fluxo'] = {\n    'is_template': True,\n    'format': {\n        'bold': True,\n        'num_format': '#,##0.00',\n        'align': 'left'\n    }\n}\n\nformats['date'] = {\n    'is_template': True,\n    'format': {\n        'align': 'left',\n        'right': 1\n    }\n}\n\nformats['tranche_header_col'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial'\n    }\n}\n\nformats['east_tranche_header_col'] = {\n    'is_template': False,\n    'format': {\n        'bold': True,\n        'align': 'center',\n        'font_size': 10,\n        'font_name': 'arial',\n        'right': 1\n    }\n}\n\nformats['quantity'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'num_format': '_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-'\n    }\n}\n\nformats['percentage'] = {\n    'is_template': True,\n    'format': {\n        'font_name': 'arial',\n        'font_size': 10,\n        'align': 'center',\n        'right': 1,\n        'num_format': '0.0000%'\n    }\n}\n", "subordinate_tranche.py": "import tranche\nimport tranche_row\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + self.despesas + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(\n            formulae, pmt, amort, juros, saldo, self.despesas)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef dependent_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    pmt = juros + self.despesas\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{despesas}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n\ndef transition_phase(self, _1, F_i, tranche_list, _2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - tranche_list[1].queue.pmt\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{pmt_next}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n    self.next_phase()\n\n\ndef main_phase(self, i, F_i, *_2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper\n    amort = pmt - juros - self.despesas\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}',\n        'amort': '{pmt}-{juros}-{despesas}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = self.despesas + juros + amort\n    saldo = self.saldo + self.despesas + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{despesas}+{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{despesas}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(\n        formulae, pmt, amort, juros, saldo, self.despesas)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass SubordinateTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period, despesas):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period, despesas)\n\n        self.phase_list = [\n            carencia_phase, dependent_phase, transition_phase, main_phase, final_phase\n        ]\n", "senior_tranche.py": "import tranche\nimport tranche_row\n\nfrom functools import reduce\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef main_phase(self, _1, F_i, tranche_list, _2):\n    row_sum = reduce(lambda acc, tranche: acc +\n                     tranche.queue.pmt, tranche_list[:-1], 0)\n\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - row_sum\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{row_sum}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = juros + amort\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass SeniorTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period)\n\n        self.phase_list = [\n            carencia_phase, main_phase, final_phase\n        ]\n", "session.py": "import tranche\nimport subordinate_tranche\nimport mezanine_tranche\nimport senior_tranche\n\n\nclass Session():\n    def __init__(self, c_period, saldo, razoes_saldo, taxas_juros, pmt_proper, despesas, fluxo_creditos):\n        self.c_period = c_period\n\n        self.tranche_list = []\n        self.final_tranche_list = []\n\n        self.total = saldo\n\n        saldo_sub = saldo * razoes_saldo[0]\n        taxa_juros_sub = taxas_juros[0]\n        tranche_sub = subordinate_tranche.SubordinateTranche(\n            'Subordinado', saldo_sub, taxa_juros_sub, pmt_proper, c_period, despesas\n        )\n        self.tranche_list.append(tranche_sub)\n\n        for i in range(len(razoes_saldo) - 2):\n            saldo_mez = saldo * razoes_saldo[i + 1]\n            taxa_juros_mez = taxas_juros[i + 1]\n            tranche_mez = mezanine_tranche.MezanineTranche(\n                'Mezanino', saldo_mez, taxa_juros_mez, pmt_proper, c_period\n            )\n            self.tranche_list.append(tranche_mez)\n\n        saldo_sen = saldo * razoes_saldo[-1]\n        taxa_juros_sen = taxas_juros[-1]\n        tranche_sen = senior_tranche.SeniorTranche(\n            'S\u00eanior', saldo_sen, taxa_juros_sen, pmt_proper, c_period\n        )\n        self.tranche_list.append(tranche_sen)\n\n        self.fluxo_creditos = fluxo_creditos\n\n    def calculate_row(self, i, F_i, tranche_list):\n        for tranche_i, tranche in enumerate(tranche_list):\n            tranche.calculate(i, F_i, self.tranche_list, tranche_i)\n\n    def run(self):\n        for i in range(len(self.fluxo_creditos) - 1):\n            i += 1\n            self.calculate_row(\n                i,\n                self.fluxo_creditos[i - 1],\n                self.tranche_list\n            )\n            for tranche_i, tranche in enumerate(self.tranche_list):\n                if tranche.queue and tranche.queue.saldo <= 0:\n                    tranche.next_phase()\n                    if tranche_i > 0:\n                        self.tranche_list[tranche_i - 1].next_phase()\n\n                    tranche.calculate(i, self.fluxo_creditos[i - 1], self.tranche_list, tranche_i)\n\n                    self.calculate_row(\n                        i,\n                        self.fluxo_creditos[i - 1],\n                        self.tranche_list[:tranche_i]\n                    )\n\n                    break\n\n            for tranche in self.tranche_list:\n                if tranche.queue:\n                    tranche.integrate_row()\n                    tranche.saldo = tranche.queue.saldo\n\n    def collapse_financial_flux(self):\n        collapsed = [0 for _ in self.tranche_list[0].row_list]\n        for tranche in self.tranche_list:\n            for i, row in enumerate(tranche.row_list):\n                collapsed[i] = collapsed[i] + row.juros + row.amort\n        return [-self.total] + [0 for _ in range(self.c_period)] + collapsed[self.c_period:]\n", "parse_input.py": "import sys\nimport json\n\nimport locale\nimport time\n\n\nclass Input():\n    def __init__(self):\n        self.raw_inputs = json.loads(sys.stdin.readlines()[0])\n\n        self.saldo_files = self.raw_inputs['inputFiles']\n        self.output_path = self.raw_inputs['outputFile']\n        self.indexador = self.raw_inputs['indexador']\n        self.pu_emis = self.raw_inputs['pu-emis']\n        self.total = self.raw_inputs['total']\n        self.razoes = self.raw_inputs['razoes']\n        self.target_irr = self.raw_inputs['target-irr']\n        self.taxas_juros = self.raw_inputs['taxas-juros']\n        self.c_period = self.raw_inputs['c-period']\n        self.fr_previsto = self.raw_inputs['fr-previsto']\n        self.pmt_proper = self.raw_inputs['pmt-proper']\n        self.despesas = self.raw_inputs['despesas']\n        self.starting_date = self.raw_inputs['starting-date']\n\n        self.parse_inputs()\n\n    def parse_inputs(self):\n        self.indexador = int(self.indexador)\n        self.pu_emis = float(self.pu_emis)\n        self.total = float(self.total)\n        self.razoes = [float(razao) / 100 for razao in self.razoes]\n        self.target_irr = float(self.target_irr)\n        self.taxas_juros_anual = [float(taxa) / 100 for taxa in self.taxas_juros]\n        self.taxas_juros = [\n            (1 + float(taxa) / 100) ** (1/12) - 1 for taxa in self.taxas_juros\n        ]\n        self.c_period = int(self.c_period)\n        self.fr_previsto = float(self.fr_previsto)\n        self.pmt_proper = float(self.pmt_proper) / 100\n        self.despesas = float(self.despesas)\n\n        locale.setlocale(locale.LC_TIME, 'pt_BR')\n        self.starting_date = time.strptime(self.starting_date, '%b/%Y')\n", "tranche_row.py": "class TrancheRow():\n    def __init__(self, formulae, pmt, amort, juros, saldo, despesas=None):\n        self.formulae = formulae\n        self.pmt = pmt\n        self.amort = amort\n        self.juros = juros\n        self.saldo = saldo\n        self.despesas = despesas\n", "prelude_matrix.py": "def create_matrix(inputs, taxas_juros_sub, taxas_juros_anual_sub, sub_length, sen_length):\n    return [\n        [\n            {\n                'title': 'Valor Total',\n                'body': [\n                    '=' + str(inputs.total)\n                ],\n                'format': ['prelude_currency']\n            },\n            {},\n            {},\n            {\n                'title': 'S\u00e9rie',\n                'body': [\n                    'S\u00eanior',\n                    'Subordinado'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'PU Emiss\u00e3o',\n                'body': [\n                    '=' + str(inputs.pu_emis),\n                    '=' + str(inputs.pu_emis)\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Indexador',\n                'body': [\n                    '=' + str(inputs.indexador),\n                    '=' + str(inputs.indexador)\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'Taxa de Juros',\n                'body': [\n                    '=' + str(inputs.taxas_juros_anual[len(inputs.taxas_juros_anual) - 1]),\n                    '=' + str(taxas_juros_anual_sub)\n                ],\n                'format': ['prelude_percentage_2']\n            }\n        ],\n        [\n            {\n                'title': 'S\u00e9rie',\n                'body': [\n                    'S\u00eanior',\n                    'Subordinado'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'Raz\u00e3o',\n                'body': [\n                    '=' + str(inputs.razoes[-1]),\n                    '=' + str(inputs.razoes[0])\n                ],\n                'format': ['prelude_percentage_0']\n            },\n            {\n                'title': 'PU Liquida\u00e7\u00e3o',\n                'body': [\n                    '=' + str(inputs.pu_emis),\n                    '=' + str(inputs.pu_emis)\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Quantidades',\n                'body': [\n                    '={i_next}/{i_prev}',\n                    '={i_next}/{i_prev}'\n                ],\n                'format': ['prelude_quantity']\n            },\n            {\n                'title': 'Montante',\n                'body': [\n                    '={Valor_Total}*{Raz\u00e3o}',\n                    '={Valor_Total}*{Raz\u00e3o}'\n                ],\n                'format': ['prelude_currency']\n            },\n            {\n                'title': 'Prazo',\n                'body': [\n                    '=' + str(sen_length),\n                    '=' + str(sub_length)\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': '% PMT',\n                'body': [\n                    '=' + str(inputs.pmt_proper)\n                ],\n                'format': ['prelude_percentage_0']\n            }\n        ],\n        [\n            {\n                'title': 'Per\u00edodo',\n                'body': [\n                    'Mensal',\n                    'Anual'\n                ],\n                'format': ['prelude_text']\n            },\n            {\n                'title': 'S\u00eanior',\n                'body': [\n                    '=' + str(inputs.taxas_juros[len(inputs.taxas_juros) - 1]),\n                    '=({prev_body}+1)^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            },\n            {\n                'title': 'Subordinado',\n                'body': [\n                    '=' + str(taxas_juros_sub),\n                    '=({prev_body}+1)^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            },\n            {\n                'title': 'TIR',\n                'body': [\n                    '=IRR({fluxo_fin_start}:{fluxo_fin_end})',\n                    '=(1+{prev_body})^12-1'\n                ],\n                'format': [\n                    'prelude_percentage_2',\n                    'prelude_percentage_2'\n                ]\n            },\n            {},\n            {\n                'title': 'FR 3 PMTS',\n                'body': [\n                    '=SUM({fluxo_3_sum_terms})*{P_PMT}-SUM({despesas_3_sum_terms})'\n                ],\n                'format': [\n                    'prelude_currency'\n                ]\n            },\n            {\n                'title': 'FR Previsto',\n                'body': [\n                    '=' + str(inputs.fr_previsto)\n                ],\n                'format': [\n                    'prelude_currency'\n                ]\n            }\n        ],\n        [\n            {\n                'title': 'Per\u00edodo',\n                'body': [\n                    'Mensal',\n                    'Anual'\n                ],\n                'format': ['prelude_text']\n            } if len(inputs.razoes) - 2 else {},\n            *[{\n                'title': 'Mezanino',\n                'body': [\n                    '=' + str(inputs.taxas_juros[i]),\n                    '=' + str(inputs.taxas_juros_anual[i])\n                ],\n                'format': [\n                    'prelude_percentage_4',\n                    'prelude_percentage_2'\n                ]\n            } for i in range(len(inputs.razoes) - 2)]\n        ]\n    ]\n\n", "main.py": "import session\nimport flux\nimport parse_input\n\nimport time\nimport locale\n\nimport numpy as np\n\nimport spreadsheet as ss\n\nprint('Processing inputs.')\n\ninputs = parse_input.Input()\n\nflux = flux.Flux(inputs.saldo_files, inputs.starting_date)\nflux_total = flux.collapse()\n\ntaxa_juros_sub = .01\n\nprint('Inputs processed.\\n')\n\nprint('Calculating curve.')\n\nirr = None\nwhile not irr or abs(inputs.target_irr - irr) >= .005:\n    if irr:\n        taxa_juros_sub *= inputs.target_irr / irr\n\n    sess = session.Session(\n        inputs.c_period,\n        inputs.total,\n        inputs.razoes,\n        [taxa_juros_sub, *inputs.taxas_juros],\n        inputs.pmt_proper,\n        inputs.despesas,\n        flux_total\n    )\n    sess.run()\n\n    fluxo_financeiro = sess.collapse_financial_flux()\n    irr = ((1 + np.irr(fluxo_financeiro)) ** 12 - 1) * 100\n\n    print(irr)\n\ncurve = sess\n\nprint('Curve calculated.\\n')\n\nprint('--- CURVE ---')\nfor tranche in curve.tranche_list:\n    print('\\n', tranche.title)\n    for i, row in enumerate(tranche.row_list):\n        print(i + 1, row.saldo, row.juros, row.amort, row.pmt)\nprint('--- END ---\\n')\n\nraise Exception('Test')\n\nprint('Rendering curve.')\nspreadsheet = ss.Spreadsheet(\n    inputs,\n    flux_total,\n    flux.months,\n    taxa_juros_sub,\n    (taxa_juros_sub + 1) ** 12 - 1,\n    curve.tranche_list,\n    len(curve.tranche_list[0].row_list),\n    len(curve.tranche_list[-1].row_list),\n    fluxo_financeiro\n)\n\nspreadsheet.render_prelude()\nspreadsheet.render_fluxo_creditos()\nspreadsheet.render_tranches()\nspreadsheet.render_fluxo_financeiro()\nspreadsheet.resize_columns()\nspreadsheet.render_file()\n\nprint('Curve rendered.')", "mezanine_tranche.py": "import tranche\nimport tranche_row\n\n\ndef carencia_phase(self, i, *_):\n    if self.i < self.c_period:\n        juros = self.saldo * self.taxa_juros\n        pmt = 0\n        amort = 0\n        saldo = self.saldo + juros - pmt\n\n        formulae = {\n            'juros': '{prev_saldo}*{taxa_juros}',\n            'pmt': '0',\n            'amort': '0',\n            'saldo': '{prev_saldo}+{juros}-{pmt}'\n        }\n\n        row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n        self.queue = row\n\n        return False\n\n    self.next_phase()\n    return True\n\n\ndef dependent_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    pmt = juros\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef transition_phase(self, _, F_i, tranche_list, tranche_i):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper - tranche_list[tranche_i + 1].queue.pmt\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}-{pmt_next}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\ndef main_phase(self, _1, F_i, *_2):\n    juros = self.saldo * self.taxa_juros\n    pmt = F_i * self.pmt_proper\n    amort = pmt - juros\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{F_i}*{pmt_proper}',\n        'amort': '{pmt}-{juros}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n\ndef final_phase(self, *_):\n    juros = self.saldo * self.taxa_juros\n    amort = self.saldo\n    pmt = juros + amort\n    saldo = self.saldo + juros - pmt\n\n    formulae = {\n        'juros': '{prev_saldo}*{taxa_juros}',\n        'pmt': '{juros}+{amort}',\n        'amort': '{prev_saldo}',\n        'saldo': '{prev_saldo}+{juros}-{pmt}'\n    }\n\n    row = tranche_row.TrancheRow(formulae, pmt, amort, juros, saldo)\n    self.queue = row\n\n    self.next_phase()\n\n\nclass MezanineTranche(tranche.Tranche):\n    def __init__(self, title, saldo, taxa_juros, pmt_proper, c_period):\n        super().__init__(title, saldo, taxa_juros, pmt_proper, c_period)\n\n        self.phase_list = [\n            carencia_phase, dependent_phase, transition_phase, main_phase, final_phase\n        ]\n", "flux.py": "import pandas as pd\nimport numpy as np\n\nimport time\nimport locale\n\nimport re\n\n# EXPECTED FORMAT for SALDO FILE:\n#  _______________________________\n# |__...__|___*MONTH___|__Total__|\n# |__...__|_____...____|___...___|\n# |__...__|___*VALUE___|___...___|\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR')\n\n\nclass Flux():\n    def __init__(self, saldo_files, starting_date):\n        self.starting_date = starting_date\n\n        self.flux_total = {}\n\n        for file in saldo_files:\n            df = pd.read_excel(file)\n            self.parse_frame(df)\n\n        self.collapsed_flux = []\n        self.months = []\n\n    def collapse(self):\n        for month, values in self.flux_total.items():\n            self.collapsed_flux.append(sum(values))\n            self.months.append(month)\n\n        return self.collapsed_flux\n\n    def parse_frame(self, df):\n        re_date = re.compile('^\\s*[A-Z][a-z]{2}/\\d{4}\\s*$')\n\n        height, width = df.shape\n\n        for col_i in range(width):\n            if re_date.match(df.iloc[0, col_i]):\n                raw_date = df.iloc[0, col_i]\n                parsed_date = time.strptime(raw_date, '%b/%Y')\n\n                parsed_year = parsed_date.tm_year\n                parsed_month = parsed_date.tm_mon\n                starting_year = self.starting_date.tm_year\n                starting_month = self.starting_date.tm_mon\n\n                if parsed_year > starting_year or parsed_year == starting_year and parsed_month >= starting_month:\n                    value = df.iloc[height - 1, col_i]\n                    if value > 0:\n                        formatted_date = time.strftime('%b-%y', parsed_date)\n\n                        if not formatted_date in self.flux_total:\n                            self.flux_total[formatted_date] = []\n\n                        self.flux_total[formatted_date].append(value)\n"}